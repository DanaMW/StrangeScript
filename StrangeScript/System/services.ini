[script]
n0=; This entire section is used to list all tokens that are understood
n1=; by this IRCD, and what the fully expanded equivalent is.
n2=;[Tokens]
n3=; !=PRIVMSG
n4=; \\=WHO
n5=; #=WHOIS
n6=; $=WHOWAS
n7=; %=USER
n8=; &=NICK
n9=; '=SERVER
n10=; (=LIST
n11=; )=TOPIC
n12=; *=INVITE
n13=; +=VERSION
n14=; ,=QUIT
n15=; -=SQUIT
n16=; .=KILL
n17=; /=INFO
n18=; 0=LINKS
n19=; 1=SUMMON
n20=; 2=STATS
n21=; 3=USERS
n22=; 4=HELP
n23=; 5=ERROR
n24=; 6= AWAY
n25=; 7= CONNECT
n26=; 8= PING
n27=; 9= PONG
n28=; \;              = OPER
n29=; <= PASS
n30=; >= TIME
n31=; =               = WALLOPS
n32=; ?               = NAMES
n33=; @               = ADMIN
n34=; B               = NOTICE
n35=; C               = JOIN
n36=; D               = PART
n37=; E               = LUSERS
n38=; F               = MOTD
n39=; G               = MODE
n40=; H               = KICK
n41=; I               = SERVICE
n42=; J               = USERHOST
n43=; K               = ISON
n44=; L               = SQUERY
n45=; M               = SERVLIST
n46=; N               = SERVSET
n47=; O               = REHASH
n48=; P               = RESTART
n49=; Q               = CLOSE
n50=; R               = DIE
n51=; S               = HASH
n52=; T               = DNS
n53=; U               = SILENCE
n54=; V               = AKILL
n55=; W               = KLINE
n56=; X               = UNKLINE
n57=; Y               = RAKILL
n58=; Z               = GNOTICE
n59=; [               = GOPER
n60=; ]               = GLOBOPS
n61=; ^               = LOCOPS
n62=; _               = PROTOCTL
n63=; `               = WATCH
n64=; b               = TRACE
n65=; c               = SQLINE
n66=; d               = UNSQLINE
n67=; e               = SVSNICK
n68=; f               = SVSNOOP
n69=; g               = PRIVMSG NickServ :IDENTIFY
n70=; h               = SVSKILL
n71=; i               = PRIVMSG NickServ
n72=; j               = PRIVMSG ChanServ
n73=; k               = PRIVMSG OperServ
n74=; l               = PRIVMSG MemoServ
n75=; m               = SERVICES
n76=; n               = SVSMODE
n77=; o               = SAMODE
n78=; p               = CHATOPS
n79=; q               = ZLINE
n80=; r               = UNZLINE
n81=; s               = PRIVMSG HelpServ
n82=; t               = RULES
n83=; u               = MAP
n84=; v               = SVS2MODE
n85=; w               = DALINFO
n86=; x               = ADCHAT
n87=; y               = MKPASSWD
n88=; z               = ADDLINE
n89=; }               = GLINE
n90=; ~               = SJOIN
n91=; AA              = SETHOST
n92=; AB              = TECHAT
n93=; AC              = NACHAT
n94=; AD              = SETIDENT
n95=; AE              = SETNAME
n96=; AF              = LAG
n97=; AG              = SDESC
n98=; AH              = PRIVMSG StatServ
n99=; AI              = KNOCK
n100=; AJ              = CREDITS
n101=; AK              = LICENSE
n102=; AL              = CHGHOST
n103=; AM              = RPING
n104=; AN              = RPONG
n105=; AO              = NETINFO
n106=; AP              = SENDUMODE
n107=; AQ              = ADDMOTD
n108=; AR              = ADDOMOTD
n109=; AS              = SVSMOTD
n110=; AU              = SMO
n111=; AV              = OPERMOTD
n112=; AW              = TSCTL
n113=; AX              = SVSJOIN
n114=; AY              = SVSPART
n115=; AZ              = CHGIDENT
n116=; BA              = SWHOIS
n117=; BB              = SVSO
n118=; BC              = SVSFLINE
n119=; BD              = TKL
n120=; BE              = VHOST
n121=; BF              = BOTMOTD
n122=; BG              = REMGLINE
n123=; BH              = HTM
n124=; |                 = UMODE2
n125=; BI              = DCCDENY
n126=; BJ              = UNDCCDENY
n127=; BK              = CHGNAME
n128=; BL              = SHUN
n129=; BM              = CRYPTO
n130=; BN              = POST
n131=; BO              = PRIVMSG InfoServ
n132=; BP              = CYCLE
n133=; BQ              = MODULE
n134=; BR              = SVSNLINE
n135=; BS              = PRIVMSG BotServ
n136=; BT              = SVSPART
n137=; DU              = DUMMY
n138=alias serv {
n139=  $report(INFO,SERV,Use /serv.debug ON/OFF to see debug info or not).active
n140=  if ($1 == $null) { $report(ERROR,SERV,requires a server number as a param or `global`).active | halt }
n141=  if ($1 == OFF) { sockclose SERVER* | return }
n142=  if ($1 == global) { sockopen global localhost 6665 | return }
n143=  if ($1 isnum) {
n144=    if ($1 < 6) { $report(INFO,SERV,Use /serv 6 and on. 1-5 are reserved).active | return }
n145=    if ($sock(SERVER $+ $1).name == $null) { sockopen SERVER [ $+ [ $1 ] ] 192.168.0.1 5555 }
n146=    else { $report(Socket,SERVER $+ $1,Is already in use.).active }
n147=    return
n148=  }
n149=  $report(ERROR,SERV,no action taken in /SERV).active
n150=}
n151=alias serv.debug {
n152=  if ($1 == $null) { $report(ERROR, SERV.DEBUG, requires ON or OFF).active | halt }
n153=  if ($1 == ON) { set %VIRTUAL.debug ON | setupshow Server Debug set ON | halt }
n154=  if ($1 == OFF) { set %VIRTUAL.debug OFF | setupshow Server Debug set OFF | halt }
n155=}
n156=on 1:SOCKOPEN:SERVER*:{
n157=  sockmark $sockname $gettok($read(Server_list.txt,-n,$right($sockname,-6)),1,44)
n158=  VirS $sockname $sock($sockname).mark
n159=  ;if ($right($sockname,-6) == 6) {
n160=  ;  vu 6 ChanServ light100
n161=  ;  vu 6 NickServ light100
n162=  ;  vu 6 MemoServ light100
n163=  ;}
n164=  if ($right($sockname,-6) == 6) {
n165=    VU 6 Cognizant light100 #mIRC
n166=    VU 6 Jasmine light100 #HobbyShop
n167=    VU 6 fuck light100
n168=    VU 6 System light100 #HobbyShop
n169=    VU 6 root light100 #mIRC
n170=  }
n171=  ;if ($right($sockname,-6) == 7) {
n172=  ;  VU 7 fuck light100
n173=  ;  VU 7 System light100 #HobbyShop
n174=  ;}
n175=  ;if ($right($sockname,-6) == 8) {
n176=  ;  VU 8 root light100 #mIRC
n177=  ;}
n178=}
n179=on 1:SOCKREAD:SERVER*:{
n180=  if ($sockerr > 0) { echo -at Sock Error $sockname READ $sock($sockname).wserr $sock($sockname).wsmsg | return }
n181=  :SERVERread
n182=  sockread %read. [ $+ [ $sockname ] ]
n183=  if ($sockbr == 0) { return }
n184=  tokenize 32 %read. [ $+ [ $sockname ] ]
n185=  ;notice Strange $1-
n186=  if ($1 == :services.localdomain.net) {
n187=    ws $right($sockname,-6) : $+ $sock($sockname).mark pong $sock($sockname).mark
n188=    if (%VIRTUAL.debug == ON) { ws $right($sockname,-6) :secure.localdomain.net notice $me : $+ $report(Virtual Server,Sock Read\Write,$sockname,Got: $1-,Sent: : $+ $sock($sockname).mark pong $sock($sockname).mark) }
n189=    ;echo -at $report(Virtual Server,Sock Read\Write,$sockname,Got: $1-,Sent: : $+ $sock($sockname).mark pong $sock($sockname).mark)
n190=    goto SERVERread
n191=  }
n192=  if ($1 == 8) {
n193=    ws $right($sockname,-6) 9 $sock($sockname).mark
n194=    if (%VIRTUAL.debug == ON) { ws $right($sockname,-6) :secure.localdomain.net notice $me : $+ $report(Virtual Server,Sock Read/Write,$sockname,Got: $1-,Sent: 9 $sock($sockname).mark) }
n195=    ;echo -at $report(Virtual Server,Sock Read/Write,$sockname,Got: $1-,Sent: 9 $sock($sockname).mark)
n196=    goto SERVERread
n197=  }
n198=  ;if ($1 == &) {  goto SERVERread }
n199=  ;if (@* iswm $1) { goto SERVERread }
n200=  ;if ($2 == !) || ($2 == $chr(124)) || ($2 == ,) { goto SERVERread }
n201=  if (%VIRTUAL.debug == ON) { ws $right($sockname,-6) :secure.localdomain.net notice $me : $+ $1- }
n202=  ;echo -at $report(Virtual Server,Sock Read,$sockname,$null,$1-)
n203=  goto SERVERread
n204=}
n205=on 1:SOCKCLOSE:SERVER*:{ $report(SOCKCLOSE,Virtual server $sockname,closed the connection).active }
n206=alias ws { sockwrite -nt SERVER $+ $1 $2- | return }
n207=alias VirS {
n208=  if ($1 == $null) || ($2 == $null) { $report(ERROR,VU,/VirS NUM SERVERNAME).active | halt }
n209=  sockwrite -n $1 PROTOCTL NOQUIT TOKEN NICKv2 SJOIN SJOIN2 UMODE2 VL SJ3 NS VHP
n210=  sockwrite -n $1 PASS CooK10
n211=  sockwrite -n $1 SERVER $2 1 :U2303-CFhiIXe- $+ $right($1,1) $gettok($read(Server_list.txt,-n,$right($sockname,1)),2,44)
n212=  sockwrite -n $1 : $+ $2 SMO o :(link) Link $2 -> localdomain.net[strange@127.0.0.1.5555] established
n213=  sockwrite -n $1 AO 97 $ctime 2303 D17C40D7 0 0 0 :StrangeScript
n214=  sockwrite -n $1 : $+ $2 SMO o :(sync) Link $2 -> localdomain.net is now synced [secs: 1 recv: 67.244 sent: 0.1022]
n215=  return
n216=}
n217=alias vu {
n218=  if ($1 == $null) || ($2 == $null) || ($3 == $null) { $report(ERROR,VU,Format: /VU NUM NICK PASSWORD [ROOMTOJOIN] ).active | halt }
n219=  vu.oper $2
n220=  if ($result == $true) {
n221=    ws $1 & $2 $1 $ctime $2 $sock(SERVER $+ $1).mark $1 0 +iowghaAsxNWHt $sock(SERVER $+ $1).mark : $+ $2
n222=    ws $1 : $+ $sock(SERVER [ $+ [ $1 ] ] ).mark svsmode $2 +r
n223=  }
n224=  ;if ($result == $bot) { ws $1 & $2 $1 $ctime $2 $sock(SERVER $+ $1).mark $1 0 +oS $sock(SERVER $+ $1).mark : $+ $2 }
n225=  else { ws $1 & $2 $1 $ctime $2 $rand(1,254) $+ . $+ $rand(100,254) $+ . $+ $rand(100,254) $+ . $+ $rand(100,254) $1 0 +ix $rand.j : $+ $2 }
n226=  ws $1 : $+ $2 nickserv identify $3
n227=  .timer 1 2 ws $1 : $+ $2 nickserv identify $3
n228=  if ($4 == $null) { ws $1 : $+ $2  C :#StrangeScript }
n229=  else { ws $1 : $+ $2  C :#StrangeScript | ws $1 : $+ $2  C : $+ $4 }
n230=  return
n231=}
n232=alias vu.oper {
n233=  if ($1 == ChanServ) { return $true }
n234=  if ($1 == NickServ) { return $true }
n235=  if ($1 == MemoServ) { return $true }
n236=  ;if ($1 == jasmine) { return $true }
n237=  return $false
n238=}
n239=alias rand.jack { return - $+ $rand(A,Z) $+ $rand(0,9) $+ $rand(0,9) $+ $rand(0,9) $+ $rand(0,9) $+ $rand(A,Z) }
n240=alias rand.j { return $rand(1111,9999) $+ $rand(A,Z) $+ $rand(1,9) $+ $rand(AA,ZZ) $+ . $+ $rand(AA,ZZ) $+ $rand(11111,99999) $+ . $+ $rand(11111,99999) $+ $rand(AA,ZZ) $+ $rand(1,9) $+ .IP }
n241=alias jack {
n242=  var %tmp.jcount = 1
n243=  var %tmp.jmax = $1
n244=  if (%tmp.jmax == $null) { var %tmp.jmax = 2268 }
n245=  while (%tmp.jcount <= %tmp.jmax) {
n246=    var %tmp.jack1 = Strange $+ $rand.jack
n247=    ws 6 & %tmp.jack1 2 $ctime %tmp.jack1 $rand(1,254) $+ . $+ $rand(100,254) $+ . $+ $rand(100,254) $+ . $+ $rand(100,254) 6 0 +ix $rand.j : $+ %tmp.jack1
n248=    ws 6 : $+ %tmp.jack1 C :#Strange
n249=    inc %tmp.jcount
n250=  }
n251=  return
n252=}
