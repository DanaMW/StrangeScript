[aliases]
n0=/opall {
n1=  keywrite settings rumble OFF
n2=  var %tmp.quit = 1
n3=  while (%tmp.quit <= $chan(0)) { 
n4=    .chanserv op $chan(%tmp.quit) $me
n5=    inc %tmp.quit 
n6=    if (%tmp.quit > $chan(0)) { break } 
n7=  }
n8=}
n9=ssl {
n10=  if ($1 == $null) || ($2 == $null) || ($3 == $null) { $report(Error,SSL,Format: /ssl <network> <server> <port>).active | halt }
n11=  if (%ssl. [ $+ [ $1 ] ] == $null) { set %ssl. $+ $1 $rand(9000,9999) $+ , $+ $2 $+ , $+ $3 }
n12=  if ($portfree($gettok(%ssl. [ $+ [ $1 ] ] ,1,46)) == $true) {
n13=    set %ssl. $+ $1 $rand(9000,9999) $+ , $+ $2 $+ , $+ $3
n14=    ; if ($master(settings,cygwin.use) == ON) { }
n15=    run -n $mircdirstunnelw.exe -c -d localhost: $+ $gettok(%ssl. [ $+ [ $1 ] ] ,1,46) -r $2 $+ : $+ $3 
n16=    if ($server == $null) { .server localhost $gettok(%ssl. [ $+ [ $1 ] ] ,1,46) }
n17=    else { .server -m localhost $gettok(%ssl. [ $+ [ $1 ] ] ,1,46) }
n18=  }
n19=  else { 
n20=    if ($server == $null) { .server localhost $gettok(%ssl. [ $+ [ $1 ] ] ,1,46) }
n21=    else { .server -m localhost $gettok(%ssl. [ $+ [ $1 ] ] ,1,46) }
n22=  }
n23=  else { 
n24=    if ($server == $null) { .server localhost $gettok(%ssl. [ $+ [ $1 ] ] ,1,46) }
n25=    else { .server -m localhost $gettok(%ssl. [ $+ [ $1 ] ] ,1,46) }
n26=  }
n27=}
n28=fix.mode {
n29=  mode $me +iowghrpaAsNWt
n30=  mode $me +s +kcFfjvGenq
n31=  mode $me
n32=  return
n33=}
n34=report.modes {
n35=  var %cmp = $remove($chanmodes,$chr(44))
n36=  var %cmpc = $len($remove($chanmodes,$chr(44)))
n37=  .write -c report_modes.txt
n38=  var %tmp.c = 1
n39=  while {%tmp.c <= %cmpc) {
n40=    echo -at ... $+ $mid(%cmp,%tmp.c,1)
n41=    ;.write -a report_modes.txt ... $+ $mid($remove($chanmodes,$chr(44)),1,1)
n42=    ;.write -a report_modes.txt .... $+ + $+ $mid(%cmp,%tmp.c,1) $+ :mode # + $+ $mid(%cmp,%tmp.c,1)
n43=    ;.write -a report_modes.txt .... $+ - $+ $mid(%cmp,%tmp.c,1) $+ :mode # - $+ $mid(%cmp,%tmp.c,1)
n44=    inc %tmp.c
n45=    if {%tmp.c > %cmpc) { break }
n46=  }
n47=  return below
n48=}
n49=key {
n50=  ;1=network 2=room 3=key
n51=  var %tmp.fold = $textdir $+ $network $+ .ini
n52=  return $readini(%tmp.fold,$1,$2)
n53=}
n54=master {
n55=  ;1=network 2=room 3=key
n56=  var %tmp.fold = $textdir $+ ScriptInfo.ini
n57=  return $readini(%tmp.fold,$1,$2)
n58=}
n59=keywrite {
n60=  ;keywrite Room key value
n61=  if ($1 == $null) || ($2 == $null) { $report(Error In KeyWrite: Trying to delete key,$1-).active | return }
n62=  var %tmp.fold = $textdir $+ $network $+ .ini
n63=  if ($3 != $null) { .writeini %tmp.fold $1 $2 $3- }
n64=  else { .writeini %tmp.fold $1 $2 "" }
n65=  return
n66=}
n67=masterwrite {
n68=  ;masterwrite Room key value
n69=  if ($1 == $null) || ($2 == $null) { $report(Error In MasterWrite: Trying to delete key,$1-).active | return }
n70=  var %tmp.fold = $textdir $+ ScriptInfo.ini
n71=  if ($3 != $null) { .writeini %tmp.fold $1 $2 $3- }
n72=  else { .writeini %tmp.fold $1 $2 "" | $report(MasterWrite: Clearing key,$1-).active }
n73=  return
n74=}
n75=smile {
n76=  if ($master(settings,smile) == $null) { var %tmp.sm = 04 $+ $chr(125) $+ 12 $+ ; $+ 08 $+ - $+ 04 $+ $chr(41) | var %tmp.sm $hex.ini(%tmp.sm) | masterwrite settings smile %tmp.sm }
n77=  return $unhex.ini($master(settings,smile))
n78=}
n79=is.room { if ($chr(35) isin $active) { return Room $chr(91) # $chr(93) Options } }
n80=/hex.ini {
n81=  unset %hex.*
n82=  set %hex.word $replace($1-,$chr(32),$chr(95))
n83=  set %n 1
n84=  while (%n <= $len(%hex.word)) {
n85=    set %hex.char $asc($mid(%hex.word,%n,1))
n86=    set %hex.val1 $int($calc(%hex.char / 16))
n87=    set %hex.val2 $calc($calc(%hex.char - (%hex.val1 * 16)))
n88=    if (%hex.val1 == 10) { set %hex.val1 A }
n89=    if (%hex.val1 == 11) { set %hex.val1 B }
n90=    if (%hex.val1 == 12) { set %hex.val1 C }
n91=    if (%hex.val1 == 13) { set %hex.val1 D }
n92=    if (%hex.val1 == 14) { set %hex.val1 E }
n93=    if (%hex.val1 == 15) { set %hex.val1 F }
n94=    if (%hex.val2 == 10) { set %hex.val2 A }
n95=    if (%hex.val2 == 11) { set %hex.val2 B }
n96=    if (%hex.val2 == 12) { set %hex.val2 C }
n97=    if (%hex.val2 == 13) { set %hex.val2 D }
n98=    if (%hex.val2 == 14) { set %hex.val2 E }
n99=    if (%hex.val2 == 15) { set %hex.val2 F }
n100=    set %hex.char %hex.val1 $+ %hex.val2
n101=    set %hex.comp %hex.comp $+ %hex.char
n102=    inc %n
n103=    if (%n > $len(%hex.word)) { break }
n104=  }
n105=  .timer 1 1 unset %hex.* %n
n106=  return %hex.comp
n107=}
n108=/unhex.ini {
n109=  unset %hex.*
n110=  set %hex.word $1-
n111=  set %hex.word $remove(%hex.word,',^)
n112=  set %n 1
n113=  while (%n <= $len(%hex.word)) {
n114=    set %hex.char $mid(%hex.word,%n,1)
n115=    if (%hex.char == A) { set %hex.char 10 }
n116=    if (%hex.char == B) { set %hex.char 11 }
n117=    if (%hex.char == C) { set %hex.char 12 }
n118=    if (%hex.char == D) { set %hex.char 13 }
n119=    if (%hex.char == E) { set %hex.char 14 }
n120=    if (%hex.char == F) { set %hex.char 15 }
n121=    set %hex.val $calc(16 * %hex.char)
n122=    inc %n
n123=    set %hex.char $mid(%hex.word,%n,1)
n124=    if (%hex.char == A) { set %hex.char 10 }
n125=    if (%hex.char == B) { set %hex.char 11 }
n126=    if (%hex.char == C) { set %hex.char 12 }
n127=    if (%hex.char == D) { set %hex.char 13 }
n128=    if (%hex.char == E) { set %hex.char 14 }
n129=    if (%hex.char == F) { set %hex.char 15 }
n130=    set %hex.val $calc(%hex.val + %hex.char)
n131=    set %hex.val $chr(%hex.val)
n132=    set %hex.comp %hex.comp $+ %hex.val
n133=    inc %n
n134=    if (%n > $len(%hex.word)) { break }
n135=  }
n136=  .timer 1 1 unset %hex.* %n
n137=  return $replace(%hex.comp,$chr(95),$chr(160))
n138=}
n139=spell.check {
n140=  return $report(SP)  $+ $1-
n141=}
n142=AutoOwner { return $textdir $+ AutoOwner. $+ $network $+ .ini }
n143=AutoOp { return $textdir $+ AutoOp. $+ $network $+ .ini }
n144=bluetop topic # $blue($1-)
n145=bluetalk say $blue($1-)
n146=blue {
n147=  var %bluetop = $bluestart
n148=  var %n = $len($1-)
n149=  var %n2 = 1
n150=  while (%n2 <= %n) {
n151=    var %bluetop = %bluetop $blueletter($mid($1-,%n2,1))
n152=    inc %n2
n153=    if (%n2 > %n) { break }
n154=  }
n155=  var %bluetop = %bluetop $blueend
n156=  return %bluetop
n157=}
n158=bluestart { return 09..:]02,02 }
n159=blueend { return 09[:.. }
n160=blueappend { return 12:09,99 }
n161=blueletter { return 12(09 $+ $1 $+ 01) }
n162=
n163=tubetop tubes $iif($1 == $null,tubEweRKs,$1-) | topic # %tubewerks
n164=tubetalk tubes $1- | say %tubewerks
n165=tubeart {
n166=  %n = 1
n167=  while (%n <= 6) {
n168=    set %tubewerks [ [ $tubeselect ] ]
n169=    set %tubewerks $gettok(%tubewerks,1,32) $+ * $+ $gettok(%tubewerks,2,32)
n170=    echo -a %tubewerks
n171=    inc %n
n172=  }
n173=  %n = 5
n174=  while (%n > 0) {
n175=    set %tubewerks [ [ $tubeselect ] ]
n176=    set %tubewerks $gettok(%tubewerks,1,32) $+ * $+ $gettok(%tubewerks,2,32)
n177=    echo -a %tubewerks
n178=    dec %n
n179=  }
n180=  %n = 2
n181=  while (%n <= 6) {
n182=    set %tubewerks [ [ $tubeselect ] ]
n183=    set %tubewerks $gettok(%tubewerks,1,32) $+ * $+ $gettok(%tubewerks,2,32)
n184=    echo -a %tubewerks
n185=    inc %n
n186=  }
n187=  %n = 5
n188=  while (%n > 0) {
n189=    set %tubewerks [ [ $tubeselect ] ]
n190=    set %tubewerks $gettok(%tubewerks,1,32) $+ * $+ $gettok(%tubewerks,2,32)
n191=    echo -a %tubewerks
n192=    dec %n
n193=  }
n194=}
n195=tubes { set %tubewerks [ [ $tubechoose ] ] | set %tubewerks $gettok(%tubewerks,1,32) $1- $gettok(%tubewerks,2,32) }
n196=tubechoose return $chr(36) $+ tubes $+ $rand(1,6)
n197=tubeselect return $chr(36) $+ tubes $+ %n
n198=tubes1 { return 12,2*9,3*13,6*11,10*4,5*8,7 4,5*11,10*13,6*9,3*12,2* }
n199=tubes2 { return 9,3*13,6*11,10*4,5*8,7*12,2 8,7*4,5*11,10*13,6*9,3* }
n200=tubes3 { return 13,6*11,10*4,5*8,7*12,2*9,3 12,2*8,7*4,5*11,10*13,6* }
n201=tubes4 { return 11,10*4,5*8,7*12,2*9,3*13,6 9,3*12,2*8,7*4,5*11,10* }
n202=tubes5 { return 4,5*8,7*12,2*9,3*13,6*11,10 13,6*9,3*12,2*8,7*4,5* }
n203=tubes6 { return 8,7*12,2*9,3*13,6*11,10*4,5 11,10*13,6*9,3*12,2*8,7* }
n204=;parse.setup {
n205=;  if ($network == $null) { quit Major error in parse.setup | halt }
n206=;  $report(Parsing server setup information below).status
n207=;  if (*supported* iswm $1-) { var %tmp.ps.info = $remove($2-,are supported by this server) }
n208=;  if (*available* iswm $1-) { var %tmp.ps.info = $remove($2-,are available on this server) }
n209=;  var %tmp.fold = $textdir $+ $network $+ .ini
n210=;  var %tmp.ps = 1
n211=;  while (%tmp.ps <= $numtok(%tmp.ps.info,32)) {
n212=;    if (*=* iswm $gettok(%tmp.ps.info,%tmp.ps,32)) { .writeini %tmp.fold parse.setup $gettok($gettok(%tmp.ps.info,%tmp.ps,32),1,61) $gettok($gettok(%tmp.ps.info,%tmp.ps,32),2,61) }
n213=;    else { .writeini %tmp.fold parse.setup $gettok(%tmp.ps.info,%tmp.ps,32) $gettok(%tmp.ps.info,%tmp.ps,32) }
n214=;    inc %tmp.ps
n215=;    if (%tmp.ps > $numtok(%tmp.ps.info,32)) { break }
n216=;  }
n217=;  return
n218=;}
n219=/halfop { 
n220=  if ($1 == ?) && ($key(#,lastin) ison $chan) { .raw mode # +h $key(#,lastin) | return }
n221=  if ($1 != ?) && ($1 != $null) { .raw mode # +hhh $1 $2 $3 }
n222=  if ($1 != ?) && ($1 == $null) {
n223=    if ($modespl == $null) { var %tmp.num = 1 }
n224=    else { var %tmp.num = $modespl }
n225=    var %tmp.count = 1
n226=    var %tmp.total = 1
n227=    while (%tmp.count <= $numtok($snicks,44)) {
n228=      var %tmp.user = $addtok(%tmp.user,$snick(#,%tmp.count),44)
n229=      if (%tmp.total == %tmp.num) {
n230=        if ($network == Dalnet) { .raw mode # $str(+h,$numtok(%tmp.user,44)) $replace(%tmp.user,$chr(44),$chr(32)) }
n231=        else { .raw mode # + $+ $str(h,$numtok(%tmp.user,44)) $replace(%tmp.user,$chr(44),$chr(32)) }
n232=        unset %tmp.user
n233=        var %tmp.total = 0
n234=      }
n235=      inc %tmp.total
n236=      inc %tmp.count
n237=      if (%tmp.count > $snick(#,0)) { break }
n238=    }
n239=    if ($network == Dalnet) { .raw mode # $str(+h,$numtok(%tmp.user,44)) $replace(%tmp.user,$chr(44),$chr(32)) }
n240=    else { .raw mode # + $+ $str(h,$numtok(%tmp.user,44)) $replace(%tmp.user,$chr(44),$chr(32)) }
n241=    return
n242=  }
n243=}
n244=/halfdop {
n245=  if ($1 == ?) && ($key(#,lastin) ison $chan) { .raw mode # -h $key(#,lastin) ]
n246=  }
n247=  if ($1 != ?) && ($1 != $null) { .raw mode # -hhh $1 $2 $3 }
n248=  if ($1 != ?) && ($1 == $null) {
n249=    if ($key(settings,ircx) == ON) { .raw access # clear owner }
n250=    if ($modespl == $null) { var %tmp.num = 1 }
n251=    else { var %tmp.num = $modespl }
n252=    var %tmp.count = 1
n253=    var %tmp.total = 1
n254=    while (%tmp.count <= $numtok($snicks,44)) {
n255=      var %tmp.user = $addtok(%tmp.user,$snick(#,%tmp.count),44)
n256=      if (%tmp.total == %tmp.num) {
n257=        if ($network == Dalnet) { .raw mode # $str(-h,$numtok(%tmp.user,44)) $replace(%tmp.user,$chr(44),$chr(32)) }
n258=        else { .raw mode # - $+ $str(h,$numtok(%tmp.user,44)) $replace(%tmp.user,$chr(44),$chr(32)) }
n259=        unset %tmp.user
n260=        var %tmp.total = 0
n261=      }
n262=      inc %tmp.total
n263=      inc %tmp.count
n264=      if (%tmp.count > $snick(#,0)) { break }
n265=    }
n266=    if ($network == Dalnet) { .raw mode # $str(-h,$numtok(%tmp.user,44)) $replace(%tmp.user,$chr(44),$chr(32)) }
n267=    else { .raw mode # - $+ $str(h,$numtok(%tmp.user,44)) $replace(%tmp.user,$chr(44),$chr(32)) }
n268=  }
n269=}
n270=/hidden.rooms {
n271=  if ($chan($1).mode == $null) { $report(ERROR,/hidden.rooms,$1,This error happens when the room modes are null).active | return }
n272=  if (*u* iswm $chan($1).mode) { names $1 }
n273=  if (*x* iswm $chan($1).mode) { names $1 }
n274=  return
n275=}
n276=display {
n277=  if ($exists(temp.txt) == $true) { remove temp.txt }
n278=  run cmd.exe /c dir/a " $+ $1- $+ " > temp.txt
n279=  msg # $report(Displaying the contents of $1-)
n280=  .timer 1 2 display.play
n281=  return
n282=}
n283=display.play {
n284=  if ($lines(temp.txt) == 0) { msg # $report(Directory or file doesnt exist) | .remove temp.txt | return }
n285=  .timer 1 1 .play # temp.txt 50
n286=  return
n287=}
n288=disks { disk }
n289=disk {
n290=  msg # $report(Disks,this system has $disk(0) disks.)
n291=  var %tmpd 1
n292=  ;ADD THIS $disk(%tmpd).label
n293=  while (%tmpd <= $disk(0)) {
n294=    ;$report(Disks,this system has $disk(0) disks.)
n295=    ;$len($disk(2).size) $round($calc($disk(2).size / 1024 / 1024 / 1024),1)
n296=    if ($len($disk(%tmpd).size) >= 10) { msg # $report(Disk %tmpd,$disk(%tmpd).path,Type: $disk(%tmpd).type,Size: $round($calc($disk(%tmpd).size / 1024 / 1024 / 1024),1) gigs,Free: $round($calc($disk(%tmpd).free / 1024 / 1024 / 1024),1) gigs) }
n297=    elseif ($len($disk(%tmpd).size) >= 7) && ($len($disk(%tmpd).size) < 10) { msg # $report(Disk %tmpd,$disk(%tmpd).path,Type: $disk(%tmpd).type,Size: $round($calc($disk(%tmpd).size / 1024 / 1024),1) megs,Free: $round($calc($disk(%tmpd).free / 1024 / 1024),1) megs) }
n298=    elseif ($len($disk(%tmpd).size) >= 4) && ($len($disk(%tmpd).size) < 7) { msg # $report(Disk %tmpd,$disk(%tmpd).path,Type: $disk(%tmpd).type,Size: $round($calc($disk(%tmpd).size / 1024),1) kb,Free: $round($calc($disk(%tmpd).free / 1024),1) kb) }
n299=    else { msg # $report(Disk %tmpd,$remove($disk(%tmpd).path,\),Type: $disk(%tmpd).type,Size: $disk(%tmpd).size k,Free: $disk(%tmpd).free k)
n300=    }
n301=    ;$round($calc($disk(2).size / 1024 / 1024 / 1024 ),2) gig
n302=    inc %tmpd
n303=  }
n304=}
n305=botmenu { if ($exists($mircdirMBot\mirc.exe) == $true) { return Bot Menu } }
n306=/menu.kick { 
n307=  if ($1 == ?) && ($key(#,lastin) ison $chan) { .raw kick # $key(#,lastin) | return }
n308=  if ($1 != ?) && ($1 != $null) { .raw kick # $1 }
n309=  if ($1 != ?) && ($1 == $null) {
n310=    var %tmp.count = 1
n311=    while (%tmp.count <= $snick(#,0)) {
n312=      .kick # $snick(#,%tmp.count) $unhex.ini($master(settings,kick.message))
n313=      inc %tmp.count
n314=      if (%tmp.count > $snick(#,0)) { break }
n315=    }
n316=    ;else { .raw mode # + $+ $str(o,$numtok(%tmp.user,44)) $replace(%tmp.user,$chr(44),$chr(32)) }
n317=    return
n318=  }
n319=}
n320=/menu.kick1 { 
n321=  var %tmp.count = 1
n322=  while (%tmp.count <= $snick(#,0)) {
n323=    .kick # $snick(#,%tmp.count) $1-
n324=    inc %tmp.count
n325=    if (%tmp.count > $snick(#,0)) { break }
n326=  }
n327=  return
n328=}
n329=/songs { return $master(settings,songs) }
n330=/check.room.vars {
n331=  if ($key(#,setupauto) == $null) { keywrite # setupauto OFF }
n332=  if ($key(#,modelock) == $null) { keywrite # modelock OFF }
n333=  if ($key(#,topiclock) == $null) { keywrite # topiclock OFF } 
n334=  if ($key(#,kicklock) == $null) { keywrite # kicklock OFF }
n335=  if ($key(#,ban.lock) == $null) { keywrite # ban.lock OFF }
n336=  if ($key(#,GateScan) == $null) { keywrite # GateScan OFF }
n337=  if ($key(#,whoisonknock) == $null) { keywrite # whoisonknock OFF }
n338=  if ($key(#,unmaskonknock) == $null) { keywrite # unmaskonknock OFF }
n339=  if ($key(#,deop) == $null) { keywrite # deop OFF }
n340=  if ($key(#,modemaster) == $null) { keywrite # modemaster OFF }
n341=  return
n342=}
n343=status {
n344=  $report(Status Report).active
n345=  notice # $report($report(Total Sockets:,$null,$sock(*,0)) - $report(Type: BNC:,$null,$sock(BNC*,0)) - $report(Boom:,$null,$sock(@Boom*,0)) - $report(Gate:,$null,$sock(@Gate*,0)) - $report(Split:,$null,$sock(@Split*,0)) - $report(Spy:,$null,$sock(Spy*,0)) - $report(Bot:,$null,$sock(Bot*,0)))
n346=}
